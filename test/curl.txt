# ========================================
# INCROWD API - COMANDI CURL COMPLETI
# ========================================
# 
# Questo file contiene tutti i comandi curl per testare
# l'API InCrowd manualmente. Organizzati per sezioni.
#
# USO: Copia e incolla i comandi nel terminale
# PREREQUISITO: Server attivo su http://localhost:3000
# ========================================

# ========================================
# 1. TEST DI CONNESSIONE E HEALTH CHECK
# ========================================

# Test se il server è attivo
curl http://localhost:3000/api/health

# Test endpoint non esistente (dovrebbe dare 404)
curl http://localhost:3000/api/nonexistent

# ========================================
# 2. AUTENTICAZIONE E LOGIN
# ========================================

# Login Admin
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"admin@incrowd.com","password":"admin123!"}'

# Login Operatore
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"operatore.test@incrowd.com","password":"Operatore123!"}'

# Login Utente
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"giovanni.bianchi@test.com","password":"Giovanni123!"}'

# Login con credenziali errate (dovrebbe dare 401)
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"wrong@email.com","password":"wrongpassword"}'

# Login senza password (dovrebbe dare 400)
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test@email.com"}'

# ========================================
# 3. GESTIONE OPERATORI (SOLO ADMIN)
# ========================================

# NOTA: Sostituisci ADMIN_TOKEN con il token ottenuto dal login admin

# Lista operatori (solo admin)
curl -X GET http://localhost:3000/api/operatori \
  -H "Authorization: Bearer ADMIN_TOKEN"

# Crea nuovo operatore (solo admin)
curl -X POST http://localhost:3000/api/operatori \
  -H "Authorization: Bearer ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "operatore.test3@incrowd.com",
    "nome": "Operatore",
    "cognome": "Test3",
    "password": "Operatore123!"
  }'

# Crea operatore senza email (dovrebbe dare 400)
curl -X POST http://localhost:3000/api/operatori \
  -H "Authorization: Bearer ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "nome": "Operatore",
    "cognome": "Test3",
    "password": "Operatore123!"
  }'

# Crea operatore con password debole (dovrebbe dare 400 se ENABLE_SECURITY_CONTROLS=true)
curl -X POST http://localhost:3000/api/operatori \
  -H "Authorization: Bearer ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "operatore.test4@incrowd.com",
    "nome": "Operatore",
    "cognome": "Test4",
    "password": "123"
  }'

# Elimina operatore (solo admin) - Sostituisci OPERATORE_ID
curl -X DELETE http://localhost:3000/api/operatori/OPERATORE_ID \
  -H "Authorization: Bearer ADMIN_TOKEN"

# Test accesso non autorizzato (utente normale che prova ad accedere)
curl -X GET http://localhost:3000/api/operatori \
  -H "Authorization: Bearer USER_TOKEN"

# ========================================
# 4. GESTIONE UTENTI (SOLO OPERATORE)
# ========================================

# NOTA: Sostituisci OPERATORE_TOKEN con il token ottenuto dal login operatore

# Lista tutti gli utenti (solo operatore)
curl -X GET http://localhost:3000/api/user \
  -H "Authorization: Bearer OPERATORE_TOKEN"

# Crea nuovo utente privato (solo operatore)
curl -X POST http://localhost:3000/api/user \
  -H "Authorization: Bearer OPERATORE_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "user_type": "privato",
    "nome": "Mario",
    "cognome": "Verdi",
    "email": "mario.verdi@test.com",
    "password": "Mario123!",
    "codiceFiscale": "VRDMRA85C03H501X"
  }'

# Crea nuovo ente (solo operatore)
curl -X POST http://localhost:3000/api/user \
  -H "Authorization: Bearer OPERATORE_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "user_type": "ente",
    "nome": "Associazione Test",
    "nome_org": "Associazione Test Jest",
    "email": "associazione.test@jest.com",
    "password": "Associazione123!",
    "codiceFiscale": "RSSMRA80A01H501U"
  }'

# Crea utente senza campi obbligatori (dovrebbe dare 400)
curl -X POST http://localhost:3000/api/user \
  -H "Authorization: Bearer OPERATORE_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "nome": "Test"
  }'

# Crea utente con email già esistente (dovrebbe dare 409)
curl -X POST http://localhost:3000/api/user \
  -H "Authorization: Bearer OPERATORE_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "user_type": "privato",
    "nome": "Mario",
    "cognome": "Verdi",
    "email": "admin@incrowd.com",
    "password": "Mario123!",
    "codiceFiscale": "VRDMRA85C03H501X"
  }'

# Test accesso non autorizzato (utente normale che prova ad accedere)
curl -X GET http://localhost:3000/api/user \
  -H "Authorization: Bearer USER_TOKEN"

# ========================================
# 5. GESTIONE PROPOSTE
# ========================================

# NOTA: Sostituisci USER_TOKEN con il token ottenuto dal login utente

# Lista proposte pubbliche (approvate)
curl -X GET http://localhost:3000/api/proposte

# Lista proposte in attesa di approvazione (solo operatore)
curl -X GET http://localhost:3000/api/proposte/pending \
  -H "Authorization: Bearer OPERATORE_TOKEN"

# Crea nuova proposta (utente autenticato)
curl -X POST http://localhost:3000/api/proposte \
  -H "Authorization: Bearer USER_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "titolo": "Proposta Test Jest",
    "descrizione": "Questa è una proposta di test creata con Jest per verificare il funzionamento dell API",
    "categoria": "Test",
    "indirizzo_citta": "Milano",
    "indirizzo_cap": "20100",
    "indirizzo_via": "Via Jest",
    "indirizzo_civico": "789"
  }'

# Crea proposta senza campi obbligatori (dovrebbe dare 400)
curl -X POST http://localhost:3000/api/proposte \
  -H "Authorization: Bearer USER_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "titolo": "Proposta Incompleta"
  }'

# Crea proposta con indirizzo incompleto (dovrebbe dare 400)
curl -X POST http://localhost:3000/api/proposte \
  -H "Authorization: Bearer USER_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "titolo": "Proposta Indirizzo Incompleto",
    "descrizione": "Proposta con indirizzo mancante",
    "categoria": "Test",
    "indirizzo_citta": "Milano"
  }'

# Approva proposta (solo operatore) - Sostituisci PROPOSTA_ID
curl -X PATCH http://localhost:3000/api/proposte/PROPOSTA_ID/stato \
  -H "Authorization: Bearer OPERATORE_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "stato": "approvata",
    "commento": "Proposta approvata tramite test curl"
  }'

# Rifiuta proposta (solo operatore) - Sostituisci PROPOSTA_ID
curl -X PATCH http://localhost:3000/api/proposte/PROPOSTA_ID/stato \
  -H "Authorization: Bearer OPERATORE_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "stato": "rifiutata",
    "commento": "Proposta rifiutata tramite test curl"
  }'

# Lista proposte dell'utente corrente
curl -X GET http://localhost:3000/api/proposte/me \
  -H "Authorization: Bearer USER_TOKEN"

# Elimina proposta (solo proprietario)
curl -X DELETE http://localhost:3000/api/proposte/PROPOSTA_ID \
  -H "Authorization: Bearer USER_TOKEN"

# ========================================
# 6. RICERCA E FILTRI
# ========================================

# Ricerca proposte
curl -X GET "http://localhost:3000/api/proposte/search?q=verde"

# Ricerca proposte con filtro categoria
curl -X GET "http://localhost:3000/api/proposte/search?q=verde&categoria=Ambiente"

# Ricerca utenti
curl -X GET "http://localhost:3000/api/user/search?q=mario"

# Ricerca con query vuota
curl -X GET "http://localhost:3000/api/proposte/search?q="

# Ricerca con caratteri speciali
curl -X GET "http://localhost:3000/api/proposte/search?q=test%20con%20spazi"

# ========================================
# 7. GESTIONE PROFILO UTENTE
# ========================================

# Visualizza profilo corrente
curl -X GET http://localhost:3000/api/user/me \
  -H "Authorization: Bearer USER_TOKEN"

# Aggiorna profilo
curl -X PATCH http://localhost:3000/api/user/profile \
  -H "Authorization: Bearer USER_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "biografia": "Biografia aggiornata tramite curl test"
  }'

# Aggiorna profilo con foto (multipart/form-data)
curl -X PATCH http://localhost:3000/api/user/profile \
  -H "Authorization: Bearer USER_TOKEN" \
  -F "fotoProfilo=@/path/to/image.jpg" \
  -F "biografia=Biografia con foto"

# Elimina account
curl -X DELETE http://localhost:3000/api/user/account \
  -H "Authorization: Bearer USER_TOKEN"

# ========================================
# 8. GESTIONE COMMENTI
# ========================================

# Lista commenti di una proposta - Sostituisci PROPOSTA_ID
curl -X GET http://localhost:3000/api/proposte/PROPOSTA_ID/commenti

# Aggiungi commento a una proposta
curl -X POST http://localhost:3000/api/proposte/PROPOSTA_ID/commenti \
  -H "Authorization: Bearer USER_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "contenuto": "Commento di test aggiunto tramite curl"
  }'

# Aggiungi commento vuoto (dovrebbe dare 400)
curl -X POST http://localhost:3000/api/proposte/PROPOSTA_ID/commenti \
  -H "Authorization: Bearer USER_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "contenuto": ""
  }'

# Elimina commento (solo proprietario o operatore)
curl -X DELETE http://localhost:3000/api/proposte/PROPOSTA_ID/commenti/COMMENTO_ID \
  -H "Authorization: Bearer USER_TOKEN"

# ========================================
# 9. GESTIONE FOLLOW
# ========================================

# Segui utente
curl -X POST http://localhost:3000/api/follow/USER_ID \
  -H "Authorization: Bearer USER_TOKEN"

# Smetti di seguire utente
curl -X DELETE http://localhost:3000/api/follow/USER_ID \
  -H "Authorization: Bearer USER_TOKEN"

# Lista utenti seguiti
curl -X GET http://localhost:3000/api/follow/following \
  -H "Authorization: Bearer USER_TOKEN"

# Lista follower
curl -X GET http://localhost:3000/api/follow/followers \
  -H "Authorization: Bearer USER_TOKEN"

# ========================================
# 10. STATISTICHE OPERATORE
# ========================================

# Statistiche operatore corrente
curl -X GET http://localhost:3000/api/operatori/stats \
  -H "Authorization: Bearer OPERATORE_TOKEN"

# ========================================
# 11. TEST DI SICUREZZA
# ========================================

# Test SQL injection
curl -X GET "http://localhost:3000/api/proposte/search?q=';%20DROP%20TABLE%20users;%20--"

# Test XSS
curl -X POST http://localhost:3000/api/proposte \
  -H "Authorization: Bearer USER_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "titolo": "<script>alert(\"xss\")</script>",
    "descrizione": "Test XSS",
    "categoria": "Test",
    "indirizzo_citta": "Milano",
    "indirizzo_cap": "20100",
    "indirizzo_via": "Via Test",
    "indirizzo_civico": "123"
  }'

# Test token invalido
curl -X GET http://localhost:3000/api/user/me \
  -H "Authorization: Bearer invalid_token_here"

# Test senza token
curl -X GET http://localhost:3000/api/user/me

# Test con token scaduto (se disponibile)
curl -X GET http://localhost:3000/api/user/me \
  -H "Authorization: Bearer EXPIRED_TOKEN_HERE"

# ========================================
# 12. TEST DI PERFORMANCE
# ========================================

# Test query molto lunga
curl -X GET "http://localhost:3000/api/proposte/search?q=$(printf 'a%.0s' {1..1000})"

# Test richieste multiple (in background)
for i in {1..10}; do
  curl -X GET http://localhost:3000/api/proposte &
done
wait

# ========================================
# 13. TEST DI VALIDAZIONE
# ========================================

# Test email invalida
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"invalid-email","password":"test123"}'

# Test password troppo corta
curl -X POST http://localhost:3000/api/operatori \
  -H "Authorization: Bearer ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@email.com",
    "nome": "Test",
    "cognome": "User",
    "password": "123"
  }'

# Test codice fiscale invalido
curl -X POST http://localhost:3000/api/user \
  -H "Authorization: Bearer OPERATORE_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "user_type": "privato",
    "nome": "Test",
    "cognome": "User",
    "email": "test@email.com",
    "password": "Test123!",
    "codiceFiscale": "INVALID"
  }'

# ========================================
# 14. TEST DI COMPATIBILITÀ
# ========================================

# Test con Accept header diverso
curl -X GET http://localhost:3000/api/proposte \
  -H "Accept: application/xml"

# Test con User-Agent personalizzato
curl -X GET http://localhost:3000/api/proposte \
  -H "User-Agent: TestBot/1.0"

# Test OPTIONS (CORS)
curl -X OPTIONS http://localhost:3000/api/proposte \
  -H "Origin: http://localhost:3000" \
  -H "Access-Control-Request-Method: POST" \
  -H "Access-Control-Request-Headers: Content-Type"

# ========================================
# 15. TEST DI ERRORI
# ========================================

# Test endpoint non esistente
curl -X GET http://localhost:3000/api/nonexistent

# Test metodo non supportato
curl -X PUT http://localhost:3000/api/proposte

# Test con Content-Type sbagliato
curl -X POST http://localhost:3000/api/proposte \
  -H "Content-Type: text/plain" \
  -d "plain text data"

# ========================================
# 16. SCRIPT DI TEST AUTOMATICO
# ========================================

# Crea uno script bash per eseguire tutti i test
cat > test_api.sh << 'EOF'
#!/bin/bash

echo "🧪 InCrowd API Test Suite"
echo "=========================="

# Colori per output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funzione per test
test_endpoint() {
    local name="$1"
    local method="$2"
    local url="$3"
    local data="$4"
    local token="$5"
    
    echo -n "Testing $name... "
    
    if [ -n "$token" ]; then
        if [ -n "$data" ]; then
            response=$(curl -s -w "%{http_code}" -X "$method" "$url" -H "Authorization: Bearer $token" -H "Content-Type: application/json" -d "$data")
        else
            response=$(curl -s -w "%{http_code}" -X "$method" "$url" -H "Authorization: Bearer $token")
        fi
    else
        if [ -n "$data" ]; then
            response=$(curl -s -w "%{http_code}" -X "$method" "$url" -H "Content-Type: application/json" -d "$data")
        else
            response=$(curl -s -w "%{http_code}" -X "$method" "$url")
        fi
    fi
    
    http_code="${response: -3}"
    body="${response%???}"
    
    if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
        echo -e "${GREEN}✓ PASS${NC} ($http_code)"
    elif [ "$http_code" -ge 400 ] && [ "$http_code" -lt 500 ]; then
        echo -e "${YELLOW}⚠ EXPECTED${NC} ($http_code)"
    else
        echo -e "${RED}✗ FAIL${NC} ($http_code)"
    fi
}

echo "1. Testing connection..."
test_endpoint "Server Health" "GET" "http://localhost:3000/api/health"

echo "2. Testing authentication..."
test_endpoint "Admin Login" "POST" "http://localhost:3000/api/auth/login" '{"email":"admin@incrowd.com","password":"admin123!"}'

echo "3. Testing public endpoints..."
test_endpoint "Public Proposte" "GET" "http://localhost:3000/api/proposte"

echo "✅ Test suite completed!"
EOF

chmod +x test_api.sh

# ========================================
# 17. NOTE E TROUBLESHOOTING
# ========================================

# PROBLEMI COMUNI:
# 1. "Connection refused" -> Server non attivo
# 2. "401 Unauthorized" -> Token mancante o scaduto
# 3. "403 Forbidden" -> Permessi insufficienti
# 4. "400 Bad Request" -> Dati mancanti o invalidi
# 5. "404 Not Found" -> Endpoint non esistente

# SOLUZIONI:
# 1. Verifica che il server sia attivo: curl http://localhost:3000/api/health
# 2. Rinnova il token facendo nuovo login
# 3. Verifica i permessi dell'utente
# 4. Controlla la struttura dei dati inviati
# 5. Verifica l'URL dell'endpoint

# ========================================
# 18. ESEMPI DI OUTPUT ATTESO
# ========================================

# Login di successo:
# {
#   "data": {
#     "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
#     "userType": "admin"
#   },
#   "message": "Login effettuato"
# }

# Creazione operatore di successo:
# {
#   "data": {
#     "nome": "Operatore",
#     "cognome": "Test",
#     "credenziali": {...},
#     "_id": "68a4d...",
#     "createdAt": "2025-08-19T...",
#     "updatedAt": "2025-08-19T..."
#   },
#   "message": "Operatore creato con successo"
# }

# ========================================
# FINE FILE - BUON TESTING! 🚀
# ========================================

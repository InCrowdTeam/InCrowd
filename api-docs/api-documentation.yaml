openapi: 3.0.0
info:
  title: InCrowd API
  version: 1.0.0
  description: |
    API completa per la piattaforma InCrowd - Sistema di gestione proposte cittadine con funzionalità social.
    
    ## Autenticazione
    L'API utilizza JWT tokens per l'autenticazione. Ottieni un token tramite `/auth/login` e includilo nell'header Authorization:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Tipi di utente
    - **user**: Cittadino normale che può creare proposte e interagire
    - **ente**: Organizzazione pubblica o privata
    - **operatore**: Moderatore con privilegi di approvazione
    - **admin**: Amministratore del sistema
    
    ## Stati delle proposte
    - **in_approvazione**: In attesa di moderazione
    - **approvata**: Approvata e visibile pubblicamente
    - **rifiutata**: Rifiutata durante la moderazione

    ## Attributi automatici
    - _id: ID unico generato da MongoDB
    - _createdAt: Data di creazione (Gestito da MongoDB)
    - _updatedAt: Data di ultimo aggiornamento (Gestito da MongoDB)
    Tutti gli attributi automatici sono gestiti da MongoDB e non devono essere forniti durante la creazione o l'aggiornamento di un documento.

  contact:
    name: InCrowd Team
    email: support@incrowd.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Server di sviluppo locale
  - url: https://incrowd-api.giacomoberti.com
    description: Server di produzione

tags:
  - name: System
    description: Endpoint di utilità e monitoraggio sistema
  - name: Authentication
    description: Gestione autenticazione e login
  - name: Users
    description: Gestione profili utente
  - name: Proposte
    description: Gestione proposte cittadine
  - name: Follow
    description: Sistema di following tra utenti
  - name: Enti
    description: Gestione enti e organizzazioni
  - name: Operatori
    description: Gestione operatori e moderazione
  - name: Admin
    description: Gestione operatori

paths:
  # =============================================================================
  # UTILITY ENDPOINTS (Non sotto /api)
  # =============================================================================
  /ping:
    get:
      tags: [System]
      summary: Endpoint di health check
      description: |
        Semplice endpoint per verificare se il server è attivo e risponde.
        Utilizzato per monitoraggio e load balancer.
      responses:
        '200':
          description: Server attivo
          content:
            application/json:
              schema:
                type: object
                properties:
                  pong:
                    type: boolean
                    example: true

  # =============================================================================
  # AUTH ENDPOINTS
  # =============================================================================
  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Login utente (tradizionale o OAuth)
      description: |
        Autentica un utente con email/password o codice OAuth.
        Supporta login per tutti i tipi di utente (user, ente, operatore, admin).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*(),.?\\\":{}|<>]).{8,}$"
                  description: >
                    Password per il nuovo account: minimo 8 caratteri, almeno una lettera maiuscola,
                    una lettera minuscola e un carattere speciale.
                  example: "PasswordSicura123!"
                oauthCode:
                  type: string
                  description: "Codice OAuth per login tramite provider esterno"
      responses:
        '200':
          description: Login effettuato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login effettuato con successo"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: "JWT token per autenticazione"
                      user:
                        $ref: '#/components/schemas/User'
                      userType:
                        type: string
                        enum: [user, ente, operatore, admin]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
          
  /api/auth/google:
    post:
      tags: [Authentication]
      summary: Login con Google OAuth
      description: Autentica un utente utilizzando il token ID di Google
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idToken
              properties:
                idToken:
                  type: string
                  description: "Token ID fornito da Google OAuth"
      responses:
        '200':
          description: Login Google effettuato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login Google effettuato con successo"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      user:
                        $ref: '#/components/schemas/User'
                      userType:
                        type: string
                        enum: [user, ente]
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  # =============================================================================
  # USER ENDPOINTS
  # =============================================================================
  /api/users:
    get:
      tags: [Users]
      summary: Recupera tutti gli utenti (solo operatori)
      description: Endpoint riservato a operatori e amministratori per visualizzare tutti gli utenti
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista degli utenti recuperata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  message:
                    type: string
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
          
    post:
      tags: [Users]
      summary: Registra un nuovo utente
      description: Crea un nuovo account utente con foto profilo opzionale
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - nome
                - cognome
                - codiceFiscale
                - email
              properties:
                nome:
                  type: string
                  example: "Mario"
                cognome:
                  type: string
                  example: "Rossi"
                codiceFiscale:
                  type: string
                  example: "RSSMRA80A01H501U"
                biografia:
                  type: string
                  maxLength: 500
                  example: "Appassionato di tecnologia"
                email:
                  type: string
                  format: email
                  example: "mario.rossi@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*(),.?\\\":{}|<>]).{8,}$"
                  description: >
                    Password per il nuovo account: minimo 8 caratteri, almeno una lettera maiuscola,
                    una lettera minuscola e un carattere speciale.
                  example: "PasswordSicura123!"
                oauthCode:
                  type: string
                  description: "Codice OAuth per registrazione tramite provider esterno"
                fotoProfilo:
                  type: string
                  format: binary
                  description: "File immagine per foto profilo (max 5MB)"
                fotoProfiloGoogle:
                  type: string
                  description: "Dati foto profilo da Google (JSON stringificato)"
      responses:
        '201':
          description: Utente creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
                      userType:
                        type: string
                        enum: [user]
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/users/me:
    get:
      tags: [Users]
      summary: Recupera dati utente corrente
      description: Ottiene i dati dell'utente attualmente autenticato
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Dati utente corrente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
          
    delete:
      tags: [Users]
      summary: Elimina account utente corrente
      description: |
        Elimina definitivamente l'account dell'utente corrente e tutti i dati associati.
        Include proposte e commenti. Non disponibile per operatori e amministratori.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account eliminato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/users/profile:
    patch:
      tags: [Users]
      summary: Aggiorna profilo utente corrente
      description: Modifica i dati del profilo dell'utente autenticato
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - nome
              properties:
                nome:
                  type: string
                  example: "Mario"
                cognome:
                  type: string
                  example: "Rossi"
                biografia:
                  type: string
                  maxLength: 500
                  example: "Biografia aggiornata"
                fotoProfilo:
                  type: string
                  format: binary
                  description: "Nuova foto profilo (max 5MB)"
      responses:
        '200':
          description: Profilo aggiornato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/users/password:
    patch:
      tags: [Users]
      summary: Aggiorna password utente corrente
      description: Modifica la password dell'utente autenticato
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newPassword
              properties:
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*(),.?\\\":{}|<>]).{8,}$"
                  description: >
                    Password per il nuovo account: minimo 8 caratteri, almeno una lettera maiuscola,
                    una lettera minuscola e un carattere speciale.
                  example: "PasswordSicura123!"
      responses:
        '200':
          description: Password aggiornata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/users/search:
    get:
      tags: [Users]
      summary: Ricerca utenti
      description: Ricerca utenti per nome, cognome o biografia con paginazione
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
            example: "Mario"
          description: "Termine di ricerca"
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: "Numero pagina"
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
          description: "Elementi per pagina"
      responses:
        '200':
          description: Risultati ricerca utenti
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/users/{id}:
    get:
      tags: [Users]
      summary: Recupera utente per ID
      description: |
        Ottiene i dati di un utente specifico. 
        I dati restituiti variano in base all'autenticazione:
        - Non autenticato: solo dati pubblici
        - Operatore: dati completi
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109ca"
          description: "ID dell'utente"
      security:
        - BearerAuth: []
        - {}
      responses:
        '200':
          description: Dati utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/User'
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/users/{id}/avatar:
    get:
  
      tags: [Users]
      summary: Recupera avatar utente
      description: Ottiene l'avatar di un utente specifico in formato base64
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109ca"
          description: "ID dell'utente"
      responses:
        '200':
          description: Avatar utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                      nome:
                        type: string
                      avatarUrl:
                        type: string
                        description: "URL data base64 dell'avatar"
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # =============================================================================
  # FOLLOW ENDPOINTS
  # =============================================================================
  /api/follow/{userId}:
    post:
      tags: [Follow]
      summary: Segui un utente
      description: |
        Inizia a seguire un utente specifico.
        Aggiorna i contatori di follower/following per entrambi gli utenti.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109ca"
          description: "ID dell'utente da seguire"
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Follow creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Follow'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Follow già esistente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'
          
    delete:
      tags: [Follow]
      summary: Smetti di seguire un utente
      description: |
        Smette di seguire un utente specifico.
        Aggiorna i contatori di follower/following per entrambi gli utenti.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109ca"
          description: "ID dell'utente da smettere di seguire"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Unfollow effettuato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Follow non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/follow/followers/{userId}:
    get:
      tags: [Follow]
      summary: Recupera follower di un utente
      description: |
        Ottiene la lista dei follower di un utente specifico con paginazione.
        Include informazioni base sui follower.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109ca"
          description: "ID dell'utente"
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      security:
        - BearerAuth: []
        - {}
      responses:
        '200':
          description: Lista follower recuperata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      followers:
                        type: array
                        items:
                          $ref: '#/components/schemas/FollowUser'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'
                      totalFollowers:
                        type: integer
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/follow/following/{userId}:
    get:
      tags: [Follow]
      summary: Recupera utenti seguiti
      description: |
        Ottiene la lista degli utenti seguiti da un utente specifico con paginazione.
        Include informazioni base sugli utenti seguiti.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109ca"
          description: "ID dell'utente"
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      security:
        - BearerAuth: []
        - {}
      responses:
        '200':
          description: Lista following recuperata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      following:
                        type: array
                        items:
                          $ref: '#/components/schemas/FollowUser'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'
                      totalFollowing:
                        type: integer
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/follow/status/{userId}:
    get:
      tags: [Follow]
      summary: Verifica stato follow
      description: |
        Verifica se l'utente corrente segue un utente specifico.
        Restituisce anche statistiche di follow per l'utente target.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109ca"
          description: "ID dell'utente da verificare"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Stato follow recuperato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      isFollowing:
                        type: boolean
                        description: "Se l'utente corrente segue l'utente target"
                      followersCount:
                        type: integer
                        description: "Numero di follower dell'utente target"
                      followingCount:
                        type: integer
                        description: "Numero di utenti seguiti dall'utente target"
                      mutualFollows:
                        type: integer
                        description: "Numero di seguaci in comune"
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # =============================================================================
  # PROPOSTE ENDPOINTS
  # =============================================================================
  /api/proposte:
    get:
      tags: [Proposte]
      summary: Recupera tutte le proposte approvate
      description: |
        Ottiene tutte le proposte pubbliche approvate, ordinate per data di creazione (più recenti prima).
        Endpoint pubblico che non richiede autenticazione.
      responses:
        '200':
          description: Lista proposte approvate recuperata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/InternalError'
          
    post:
      tags: [Proposte]
      summary: Crea una nuova proposta
      description: |
        Crea una nuova proposta cittadina. Disponibile solo per utenti e enti.
        La proposta sarà inizialmente in stato "in_approvazione" fino alla moderazione.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - titolo
                - descrizione
              properties:
                titolo:
                  type: string
                  maxLength: 100
                  example: "Concerto al parco"
                descrizione:
                  type: string
                  maxLength: 1000
                  example: "Proposta per organizzare un concerto gratuito al parco della città"
                categoria:
                  type: string
                  example: "Musica"
                dataIpotetica:
                  type: string
                  format: date
                  example: "2024-06-15"
                foto:
                  type: string
                  format: binary
                  description: "Foto della proposta (max 5MB, JPEG/PNG/GIF/WebP)"
                luogo:
                  type: object
                  properties:
                    citta:
                      type: string
                      example: "Roma"
                    cap:
                      type: string
                      example: "00100"
                    via:
                      type: string
                      example: "Via del Corso"
                    civico:
                      type: string
                      example: "123"
                    provincia:
                      type: string
                      example: "RM"
                    regione:
                      type: string
                      example: "Lazio"
      responses:
        '201':
          description: Proposta creata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/my:
    get:
      tags: [Proposte]
      summary: Recupera proposte dell'utente corrente
      description: |
        Ottiene tutte le proposte create dall'utente corrente, indipendentemente dallo stato.
        Include proposte in attesa, approvate e rifiutate.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Proposte dell'utente recuperate con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/followed:
    get:
      tags: [Proposte]
      summary: Recupera proposte degli utenti seguiti
      description: |
        Ottiene le proposte approvate degli utenti che l'utente corrente segue.
        Utile per creare una timeline personalizzata.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Proposte degli utenti seguiti recuperate con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/search:
    get:
      tags: [Proposte]
      summary: Ricerca proposte
      description: |
        Ricerca avanzata tra le proposte con filtri multipli e paginazione.
        Cerca nel titolo, descrizione e categoria delle proposte approvate.
      parameters:
        - in: query
          name: q
          schema:
            type: string
            example: "concerto"
          description: "Termine di ricerca generale"
        - in: query
          name: categoria
          schema:
            type: string
            example: "Musica"
          description: "Filtro per categoria"
        - in: query
          name: citta
          schema:
            type: string
            example: "Roma"
          description: "Filtro per città"
        - in: query
          name: stato
          schema:
            type: string
            enum: [in_approvazione, approvata, rifiutata]
            example: "approvata"
          description: "Filtro per stato (solo operatori possono vedere non approvate)"
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [createdAt, listaHyper, titolo]
            default: createdAt
          description: "Campo di ordinamento"
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: "Numero pagina"
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
          description: "Elementi per pagina"
      security:
        - BearerAuth: []
        - {}
      responses:
        '200':
          description: Risultati ricerca proposte
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      proposte:
                        type: array
                        items:
                          $ref: '#/components/schemas/Proposta'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'
                      totalResults:
                        type: integer
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/user/{userId}:
    get:
      tags: [Proposte]
      summary: Recupera proposte approvate di un utente
      description: |
        Ottiene tutte le proposte approvate pubblicamente di un utente specifico.
        Endpoint pubblico per visualizzare il portfolio di un utente.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109ca"
          description: "ID dell'utente"
      responses:
        '200':
          description: Proposte approvate dell'utente recuperate con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/pending:
    get:
      tags: [Proposte]
      summary: Recupera proposte in attesa di moderazione
      description: |
        Ottiene tutte le proposte in stato "in_approvazione" per la moderazione.
        Disponibile solo per operatori e amministratori.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Proposte in attesa recuperate con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/commenti:
    get:
      tags: [Proposte]
      summary: Recupera ultimi commenti globali
      description: |
        Ottiene gli ultimi commenti da tutte le proposte, ordinati per data.
        Utile per una vista globale dell'attività di commenti.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: "Numero massimo di commenti da restituire"
      responses:
        '200':
          description: Ultimi commenti recuperati con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      commenti:
                        type: array
                        items:
                          $ref: '#/components/schemas/Commento'
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/{id}:
    get:
      tags: [Proposte]
      summary: Recupera proposta per ID
      description: |
        Ottiene una proposta specifica per ID. Se la proposta non è approvata,
        è visibile solo al creatore e agli operatori/amministratori.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109cb"
          description: "ID della proposta"
      security:
        - BearerAuth: []
        - {}
      responses:
        '200':
          description: Proposta recuperata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
          
    delete:
      tags: [Proposte]
      summary: Elimina una proposta
      description: |
        Elimina una proposta. Disponibile solo per il creatore della proposta,
        operatori e amministratori.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109cb"
          description: "ID della proposta"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Proposta eliminata con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/{id}/hyper:
    patch:
      tags: [Proposte]
      summary: Gestisce hype di una proposta
      description: |
        Aggiunge o rimuove l'hype dell'utente corrente per una proposta.
        Se l'utente ha già dato hype, lo rimuove; altrimenti lo aggiunge.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109cb"
          description: "ID della proposta"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Hype aggiornato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/{id}/stato:
    patch:
      tags: [Proposte]
      summary: Aggiorna stato proposta (moderazione)
      description: |
        Aggiorna lo stato di una proposta (approva o rifiuta).
        Disponibile solo per operatori e amministratori.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109cb"
          description: "ID della proposta"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stato
              properties:
                stato:
                  type: string
                  enum: [approvata, rifiutata]
                  example: "approvata"
                commento:
                  type: string
                  example: "Proposta interessante e ben strutturata"
                  description: "Commento di moderazione (opzionale)"
      responses:
        '200':
          description: Stato proposta aggiornato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/{id}/commenti:
    get:
      tags: [Proposte]
      summary: Recupera commenti di una proposta
      description: |
        Ottiene tutti i commenti di una proposta specifica, ordinati cronologicamente.
        Include informazioni sui autori dei commenti.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109cb"
          description: "ID della proposta"
      responses:
        '200':
          description: Commenti recuperati con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Commento'
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
          
    post:
      tags: [Proposte]
      summary: Aggiungi commento a una proposta
      description: |
        Aggiunge un nuovo commento a una proposta. Disponibile per utenti,
        enti e operatori autenticati.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109cb"
          description: "ID della proposta"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contenuto
              properties:
                contenuto:
                  type: string
                  minLength: 1
                  maxLength: 500
                  example: "Ottima proposta, sono molto interessato!"
                riferimentoRisposta:
                  type: string
                  description: "ID del commento a cui si sta rispondendo (opzionale)"
                  example: "60d0fe4f5311236168a109cc"
      responses:
        '201':
          description: Commento aggiunto con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Commento'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/proposte/{propostaId}/commenti/{commentoId}:
    delete:
      tags: [Proposte]
      summary: Elimina un commento
      description: |
        Elimina un commento specifico. Disponibile solo per il creatore del commento,
        operatori e amministratori.
      parameters:
        - in: path
          name: propostaId
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109cb"
          description: "ID della proposta"
        - in: path
          name: commentoId
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109cc"
          description: "ID del commento"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Commento eliminato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # =============================================================================
  # ENTI ENDPOINTS
  # =============================================================================
  /api/enti:
    get:
      tags: [Enti]
      summary: Recupera tutti gli enti
      description: |
        Ottiene la lista di tutti gli enti registrati nel sistema.
        Disponibile solo per operatori e amministratori.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista enti recuperata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ente'
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
          
    post:
      tags: [Enti]
      summary: Registra un nuovo ente
      description: |
        Crea un nuovo account ente nel sistema. Supporta registrazione tradizionale
        e OAuth con foto profilo opzionale.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - nome
                - codiceFiscale
                - email
              properties:
                nome:
                  type: string
                  example: "Comune di Roma"
                codiceFiscale:
                  type: string
                  example: "12345678901"
                  description: "Può essere codice fiscale o partita IVA"
                biografia:
                  type: string
                  maxLength: 500
                  example: "Amministrazione comunale della città di Roma"
                email:
                  type: string
                  format: email
                  example: "info@comune.roma.it"
                password:
                  type: string
                  format: password
                  minLength: 8
                  pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*(),.?\\\":{}|<>]).{8,}$"
                  description: >
                    Password per il nuovo account: minimo 8 caratteri, almeno una lettera maiuscola,
                    una lettera minuscola e un carattere speciale.
                  example: "PasswordSicura123!"
                oauthCode:
                  type: string
                  description: "Codice OAuth per registrazione tramite provider esterno"
                fotoProfilo:
                  type: string
                  format: binary
                  description: "File immagine per foto profilo (max 5MB)"
                fotoProfiloGoogle:
                  type: string
                  description: "Dati foto profilo da Google (JSON stringificato)"
      responses:
        '201':
          description: Ente creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      ente:
                        $ref: '#/components/schemas/Ente'
                      token:
                        type: string
                      userType:
                        type: string
                        enum: [ente]
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/enti/profile:
    patch:
      tags: [Enti]
      summary: Aggiorna profilo ente corrente
      description: |
        Modifica i dati del profilo dell'ente autenticato.
        Permette aggiornamento di nome, biografia e foto profilo.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - nome
              properties:
                nome:
                  type: string
                  example: "Comune di Roma"
                biografia:
                  type: string
                  maxLength: 500
                  example: "Biografia aggiornata dell'ente"
                fotoProfilo:
                  type: string
                  format: binary
                  description: "Nuova foto profilo (max 5MB)"
      responses:
        '200':
          description: Profilo ente aggiornato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Ente'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/enti/password:
    patch:
      tags: [Enti]
      summary: Aggiorna password ente corrente
      description: |
        Modifica la password dell'ente autenticato.
        Richiede la conferma della password attuale per sicurezza.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newPassword
              properties:
                currentPassword:
                  type: string
                  example: "PasswordCorrente123!"
                  description: "Password attuale (richiesta per sicurezza)"
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*(),.?\\\":{}|<>]).{8,}$"
                  description: >
                    Password per il nuovo account: minimo 8 caratteri, almeno una lettera maiuscola,
                    una lettera minuscola e un carattere speciale.
                  example: "PasswordSicura123!"
      responses:
        '200':
          description: Password aggiornata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Ente'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # =============================================================================
  # OPERATORE ENDPOINTS
  # =============================================================================
  /api/operatori:
    post:
      tags: [Operatori]
      summary: Crea un nuovo operatore (solo admin)
      description: |
        Crea un nuovo account operatore nel sistema.
        Disponibile solo per amministratori.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nome
                - cognome
                - email
                - password
              properties:
                nome:
                  type: string
                  example: "Mario"
                cognome:
                  type: string
                  example: "Rossi"
                email:
                  type: string
                  format: email
                  example: "mario.rossi@admin.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*(),.?\\\":{}|<>]).{8,}$"
                  description: >
                    Password per il nuovo account: minimo 8 caratteri, almeno una lettera maiuscola,
                    una lettera minuscola e un carattere speciale.
                  example: "PasswordSicura123!"
      responses:
        '201':
          description: Operatore creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Operatore'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/operatori/stats:
    get:
      tags: [Operatori]
      summary: Statistiche operatore corrente
      description: |
        Ottiene le statistiche di moderazione dell'operatore corrente.
        Include numero di proposte moderate, approvate e rifiutate.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Statistiche operatore recuperate con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      proposteModerate:
                        type: integer
                        example: 25
                      proposteApprovate:
                        type: integer
                        example: 20
                      proposteRifiutate:
                        type: integer
                        example: 5
                      periodo:
                        type: string
                        example: "ultimo mese"
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  # ADMIN OPERATORI ENDPOINTS
  # =============================================================================
  /api/admin/operatori:
    get:
      tags: [Admin - Operatori]
      summary: Recupera tutti gli operatori (solo admin)
      description: |
        Ottiene la lista di tutti gli operatori registrati nel sistema.
        Endpoint riservato esclusivamente agli amministratori.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - in: query
          name: search
          schema:
            type: string
          description: "Termine di ricerca per nome o cognome"
      responses:
        '200':
          description: Lista operatori recuperata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      operatori:
                        type: array
                        items:
                          $ref: '#/components/schemas/Operatore'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
          
    post:
      tags: [Admin - Operatori]
      summary: Crea nuovo operatore (solo admin)
      description: |
        Crea un nuovo account operatore nel sistema.
        Endpoint riservato esclusivamente agli amministratori.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nome
                - cognome
                - email
                - password
              properties:
                nome:
                  type: string
                  example: "Mario"
                cognome:
                  type: string
                  example: "Rossi"
                email:
                  type: string
                  format: email
                  example: "mario.rossi@operatore.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*(),.?\\\":{}|<>]).{8,}$"
                  description: >
                    Password per il nuovo account: minimo 8 caratteri, almeno una lettera maiuscola,
                    una lettera minuscola e un carattere speciale.
                  example: "PasswordSicura123!"
      responses:
        '201':
          description: Operatore creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Operatore'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/admin/operatori/{id}:
    delete:
      tags: [Admin - Operatori]
      summary: Elimina operatore (solo admin)
      description: |
        Elimina un operatore dal sistema. Disponibile solo per amministratori.
        L'operazione è irreversibile.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "60d0fe4f5311236168a109ca"
          description: "ID dell'operatore da eliminare"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Operatore eliminato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # =============================================================================
  # AUTH LINK GOOGLE ACCOUNT
  # =============================================================================
  /api/auth/link-google:
    post:
      tags: [Authentication]
      summary: Collega account Google esistente
      description: |
        Collega un account Google a un account esistente nel sistema.
        Permette login futuro tramite Google OAuth.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idToken
              properties:
                idToken:
                  type: string
                  description: "Token ID Google OAuth"
      responses:
        '200':
          description: Account Google collegato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Account Google collegato con successo"
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Account Google già collegato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token ottenuto tramite login"

  responses:
    BadRequest:
      description: "Richiesta non valida - dati mancanti o formato errato"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    Unauthorized:
      description: "Non autorizzato - token mancante o non valido"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    Forbidden:
      description: "Accesso negato - privilegi insufficienti"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    NotFound:
      description: "Risorsa non trovata"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    Conflict:
      description: "Conflitto - risorsa già esistente"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictError'
    InternalError:
      description: "Errore interno del server"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'

  schemas:
    # =============================================================================
    # ERROR RESPONSE SCHEMAS
    # =============================================================================
    BadRequestError:
      type: object
      required:
        - success
        - error
        - message
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "BAD_REQUEST"
        message:
          type: string
          example: "I dati forniti non sono validi"
        details:
          type: object
          description: "Dettagli specifici dell'errore (opzionale)"
          properties:
            field:
              type: string
              example: "email"
            reason:
              type: string
              example: "Formato email non valido"
            validationErrors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
              example:
                - field: "password"
                  message: "La password deve contenere almeno 8 caratteri"
                - field: "email"
                  message: "Email già registrata"

    UnauthorizedError:
      type: object
      required:
        - success
        - error
        - message
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "UNAUTHORIZED"
        message:
          type: string
          example: "Token di autenticazione mancante o non valido"
        details:
          type: object
          properties:
            reason:
              type: string
              enum: ["TOKEN_MISSING", "TOKEN_INVALID", "TOKEN_EXPIRED", "INVALID_CREDENTIALS"]
              example: "TOKEN_EXPIRED"
            expiredAt:
              type: string
              format: date-time
              example: "2024-08-18T10:30:00Z"

    ForbiddenError:
      type: object
      required:
        - success
        - error
        - message
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "FORBIDDEN"
        message:
          type: string
          example: "Accesso negato - privilegi insufficienti"
        details:
          type: object
          properties:
            requiredRole:
              type: string
              enum: ["operatore", "admin", "ente", "user"]
              example: "operatore"
            currentRole:
              type: string
              enum: ["operatore", "admin", "ente", "user"]
              example: "user"
            action:
              type: string
              example: "moderate_proposal"

    NotFoundError:
      type: object
      required:
        - success
        - error
        - message
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "NOT_FOUND"
        message:
          type: string
          example: "Risorsa non trovata"
        details:
          type: object
          properties:
            resource:
              type: string
              enum: ["user", "proposta", "commento", "ente", "operatore", "follow"]
              example: "proposta"
            resourceId:
              type: string
              example: "60d0fe4f5311236168a109cb"
            suggestion:
              type: string
              example: "Verifica che l'ID sia corretto e che la risorsa esista"

    ConflictError:
      type: object
      required:
        - success
        - error
        - message
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "CONFLICT"
        message:
          type: string
          example: "Risorsa già esistente o conflitto nei dati"
        details:
          type: object
          properties:
            conflictType:
              type: string
              enum: ["DUPLICATE_EMAIL", "DUPLICATE_CODICE_FISCALE", "ALREADY_FOLLOWING", "ALREADY_HYPED"]
              example: "DUPLICATE_EMAIL"
            conflictField:
              type: string
              example: "email"
            conflictValue:
              type: string
              example: "user@example.com"
            existingResourceId:
              type: string
              example: "60d0fe4f5311236168a109ca"

    InternalServerError:
      type: object
      required:
        - success
        - error
        - message
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "INTERNAL_SERVER_ERROR"
        message:
          type: string
          example: "Errore interno del server. Riprova più tardi"
        details:
          type: object
          properties:
            errorId:
              type: string
              example: "ERR_2024081810301234"
              description: "ID univoco dell'errore per il debugging"
            timestamp:
              type: string
              format: date-time
              example: "2024-08-18T10:30:12Z"
            supportMessage:
              type: string
              example: "Se il problema persiste, contatta il supporto con l'ID errore"

    # =============================================================================
    # RESPONSE SCHEMAS
    # =============================================================================
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operazione completata con successo"
        data:
          type: object
          description: "Dati della risposta (opzionale)"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: "Messaggio di errore leggibile"
          example: "I dati forniti non sono validi"
        error:
          type: string
          description: "Codice errore (opzionale)"
          example: "VALIDATION_ERROR"

    PaginationInfo:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 200
        itemsPerPage:
          type: integer
          example: 20
        hasNextPage:
          type: boolean
          example: true
        hasPrevPage:
          type: boolean
          example: false

    # =============================================================================
    # USER SCHEMAS
    # =============================================================================
    User:
      type: object
      required:
        - nome
        - cognome
        - codiceFiscale
        - credenziali
      properties:
        _id:
          type: string
          description: "ID univoco dell'utente"
          example: "60d0fe4f5311236168a109ca"
        nome:
          type: string
          description: "Nome dell'utente"
          example: "Mario"
        cognome:
          type: string
          description: "Cognome dell'utente"
          example: "Rossi"
        codiceFiscale:
          type: string
          description: "Codice fiscale dell'utente"
          example: "RSSMRA80A01H501U"
        biografia:
          type: string
          maxLength: 500
          description: "Biografia dell'utente"
          example: "Appassionato di tecnologia e sport"
        fotoProfilo:
          $ref: '#/components/schemas/Allegato'
        credenziali:
          $ref: '#/components/schemas/Credenziali'
        followersCount:
          type: integer
          description: "Numero di follower"
          example: 150
        followingCount:
          type: integer
          description: "Numero di utenti seguiti"
          example: 75
        proposteCount:
          type: integer
          description: "Numero di proposte create"
          example: 12
        createdAt:
          type: string
          format: date-time
          description: "Data di creazione account"
        updatedAt:
          type: string
          format: date-time
          description: "Data ultimo aggiornamento"

    FollowUser:
      type: object
      description: "Utente nel contesto di follow/follower"
      properties:
        _id:
          type: string
          example: "60d0fe4f5311236168a109ca"
        nome:
          type: string
          example: "Mario"
        cognome:
          type: string
          example: "Rossi"
        biografia:
          type: string
          example: "Appassionato di tecnologia"
        fotoProfilo:
          $ref: '#/components/schemas/Allegato'
        followedAt:
          type: string
          format: date-time
          description: "Data di inizio follow"
        isFollowingBack:
          type: boolean
          description: "Se l'utente ricambia il follow"

    # =============================================================================
    # PROPOSTA SCHEMAS
    # =============================================================================
    Proposta:
      type: object
      required:
        - titolo
        - descrizione
        - categoria
        - proponenteID
        - stato
      properties:
        _id:
          type: string
          description: "ID univoco della proposta"
          example: "60d0fe4f5311236168a109cb"
        titolo:
          type: string
          maxLength: 100
          description: "Titolo della proposta"
          example: "Concerto al parco"
        descrizione:
          type: string
          maxLength: 1000
          description: "Descrizione dettagliata"
          example: "Organizziamo un concerto gratuito al parco della città"
        categoria:
          type: string
          description: "Categoria della proposta"
          example: "Musica"
        proponenteID:
          type: string
          description: "ID del proponente (utente o ente)"
          example: "60d0fe4f5311236168a109ca"
        proponente:
          oneOf:
            - $ref: '#/components/schemas/User'
          description: "Dati del proponente (popolato automaticamente)"
        stato:
          type: object
          description: "Stato di approvazione della proposta"
          properties:
            stato:
              $ref: '#/components/schemas/StatoPropostaEnum'
            commento:
              type: string
              description: "Commento di moderazione"
              example: "Proposta approvata - ben strutturata"
        dataIpotetica:
          type: string
          format: date
          description: "Data ipotetica dell'evento"
          example: "2024-06-15"
        foto:
          $ref: '#/components/schemas/Allegato'
          description: "Foto principale della proposta"
        luogo:
          $ref: '#/components/schemas/Indirizzo'
          description: "Indirizzo dell'evento"
        listaHyper:
          type: array
          items:
            type: string
          description: "Lista ID utenti che hanno dato hype"
          example: ["60d0fe4f5311236168a109ca", "60d0fe4f5311236168a109cd"]
        hype:
          type: integer
          description: "Numero di hype ricevuti (calcolato dalla listaHyper)"
          example: 25
        commenti:
          type: integer
          description: "Numero di commenti"
          example: 8
        views:
          type: integer
          description: "Numero di visualizzazioni"
          example: 150
        createdAt:
          type: string
          format: date-time
          description: "Data di creazione"
        updatedAt:
          type: string
          format: date-time
          description: "Data ultimo aggiornamento"

    StatoPropostaEnum:
      type: string
      enum: [in_approvazione, approvata, rifiutata]
      description: |
        Stato di approvazione della proposta:
        - in_approvazione: In attesa di moderazione
        - approvata: Approvata e visibile pubblicamente
        - rifiutata: Rifiutata durante la moderazione
      example: "approvata"

    # =============================================================================
    # FOLLOW SCHEMAS
    # =============================================================================
    Follow:
      type: object
      required:
        - follower
        - followed
      properties:
        _id:
          type: string
          example: "60d0fe4f5311236168a109cc"
        follower:
          type: string
          description: "ID dell'utente che segue"
          example: "60d0fe4f5311236168a109ca"
        followed:
          type: string
          description: "ID dell'utente seguito"
          example: "60d0fe4f5311236168a109cd"
        createdAt:
          type: string
          format: date-time
          description: "Data di inizio follow"

    # =============================================================================
    # SUPPORTING SCHEMAS
    # =============================================================================
    Credenziali:
      type: object
      required:
        - email
        - oauthCode
        - password
      properties:
        email:
          type: string
          format: email
          description: "Email per l'accesso"
          example: "user@example.com"
        oauthCode:
          type: string
          description: "Codice OAuth per autenticazione con Google"

    Indirizzo:
      type: object
      required:
        - citta
        - cap
        - via
        - civico
      properties:
        citta:
          type: string
          description: "Città"
          example: "Roma"
        cap:
          type: string
          description: "Codice postale"
          example: "00100"
        via:
          type: string
          description: "Nome della via"
          example: "Via del Corso"
        civico:
          type: string
          description: "Numero civico"
          example: "123"

    Allegato:
      type: object
      required:
        - data
        - contentType
      properties:
        data:
          type: string
          format: binary
          description: "File allegato (immagine, documento, etc.) in BASE64"
        contentType:
          type: string
          description: "Tipo di contenuto del file"
          example: "image/jpeg"

    # =============================================================================
    # ENTE SCHEMAS
    # =============================================================================
    Ente:
      type: object
      required:
        - nome
        - codiceFiscale
        - credenziali
      properties:
        _id:
          type: string
          description: "ID univoco dell'ente"
          example: "60d0fe4f5311236168a109ce"
        nome:
          type: string
          description: "Nome dell'ente"
          example: "Comune di Trento"
        codiceFiscale:
          type: string
          description: "Codice fiscale o partita IVA dell'ente"
          example: "12345678901"
        biografia:
          type: string
          maxLength: 500
          description: "Descrizione dell'ente"
          example: "Amministrazione comunale della città di Trento"
        fotoProfilo:
          $ref: '#/components/schemas/Allegato'
        credenziali:
          $ref: '#/components/schemas/Credenziali'
        createdAt:
          type: string
          format: date-time
          description: "Data di registrazione"
        updatedAt:
          type: string
          format: date-time
          description: "Data ultimo aggiornamento"

    # =============================================================================
    # OPERATORE SCHEMAS
    # =============================================================================
    Operatore:
      type: object
      required:
        - nome
        - cognome
        - credenziali
      properties:
        _id:
          type: string
          description: "ID univoco dell'operatore"
          example: "60d0fe4f5311236168a109cf"
        nome:
          type: string
          description: "Nome dell'operatore"
          example: "Mario"
        cognome:
          type: string
          description: "Cognome dell'operatore"
          example: "Rossi"
        credenziali:
          $ref: '#/components/schemas/Credenziali'
        createdAt:
          type: string
          format: date-time
          description: "Data di creazione account"
        updatedAt:
          type: string
          format: date-time
          description: "Data ultimo aggiornamento"

    # =============================================================================
    # COMMENTO SCHEMAS
    # =============================================================================
    Commento:
      type: object
      required:
        - utente
        - proposta
        - contenuto
      properties:
        _id:
          type: string
          description: "ID univoco del commento"
          example: "60d0fe4f5311236168a109d1"
        utente:
          type: object
          description: "Autore del commento"
          properties:
            _id:
              type: string
              example: "60d0fe4f5311236168a109ca"
        proposta:
          type: object
          description: "Proposta commentata"
          properties:
            _id:
              type: string
              example: "60d0fe4f5311236168a109cb"
        contenuto:
          type: string
          description: "Contenuto del commento"
          example: "Ottima proposta, sono molto interessato!"
        dataOra:
          type: string
          format: date-time
          description: "Data e ora del commento"
        riferimentoRisposta:
          type: string
          description: "ID del commento a cui si sta rispondendo (se è una risposta)"
          example: "60d0fe4f5311236168a109d2"
        isRisposta:
          type: boolean
          description: "Se il commento è una risposta a un altro commento"
          example: false

security:
  - BearerAuth: []
  - {}

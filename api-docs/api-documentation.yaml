openapi: 3.0.0
info:
  title: InCrowd API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: |
    # InCrowd API
    
    Benvenuto nella documentazione dell'API di InCrowd, una piattaforma innovativa di crowdsourcing per proposte e iniziative cittadine.
    
    ## Panoramica
    
    L'API InCrowd fornisce accesso completo alla piattaforma per:
    - Gestione utenti unificata (cittadini privati ed enti)
    - Creazione e gestione proposte
    - Sistema di follow/followers
    - Amministrazione e moderazione con separazione dei ruoli
    
    **Funzionalità principali**:
    - **Autenticazione**: Login tradizionale e Google OAuth
    - **Gestione utenti**: Registrazione, profili, ricerca
    - **Proposte**: Creazione, moderazione, commenti, hype
    - **Follow system**: Relazioni tra utenti
    - **Gestione operatori**: Creazione e gestione account moderatori
    
    **Limitazioni note**:
    - **Cambio password**: Non implementato per utenti esistenti
    - **Reset password**: Non implementato automatico
    - **Separazione ruoli**: Admin limitati alla gestione operatori
    
    **Soluzioni alternative**:
    - Per cambio password: Supporto tecnico o re-registrazione
    - Per admin che devono moderare: Creare account operatore separato
    
    ## Autenticazione e Sicurezza
    
    L'API utilizza autenticazione JWT (JSON Web Token) con flusso completo:
    
    ### Flusso di Autenticazione
    
    1. **Login**: Ottieni il token tramite `POST /api/auth/login` o `POST /api/auth/google`
    2. **Utilizzo**: Includi il token nell'header di ogni richiesta:
       ```
       Authorization: Bearer <your-jwt-token>
       ```
    3. **Validazione**: Il token viene validato ad ogni richiesta tramite middleware
    4. **Scadenza**: Token validi per 7 giorni (configurabile)
    
    ### Struttura JWT
    
    Il JWT contiene i seguenti claim:
    - `userId`: ID univoco dell'utente nel database
    - `email`: Email dell'utente per identificazione
    - `userType`: Tipo utente (`privato`, `ente`, `operatore`, `admin`)
    - `iat`: Timestamp di emissione
    - `exp`: Timestamp di scadenza
    
    ### Gestione Token
    
    - **Refresh**: Non implementato - richiedere nuovo login alla scadenza
    - **Revoca**: Token invalidati automaticamente alla logout
    - **Sicurezza**: Token firmati con `JWT_SECRET` configurabile
    - **Admin Speciale**: Credenziali admin hardcoded per accesso privilegiato
    
    ### Gestione Password
    
    **IMPORTANTE**: L'API attualmente NON fornisce un endpoint per cambiare password esistenti.
    
    **Endpoint disponibili**:
    - **Impostazione password**: `PATCH /api/auth/password` - Solo per utenti senza password (es. OAuth-only)
    - **Cambio password**: **NON IMPLEMENTATO** - Richiede nuovo login se password dimenticata
    
    **Casi d'uso supportati**:
    - Utenti con password: Possono fare login con password esistente
    - Utenti OAuth-only: Possono impostare una password tramite `/api/auth/password`
    - Utenti che dimenticano password: Devono richiedere reset tramite supporto o re-registrazione
    
    **Requisiti minimi per le password sono**:
    - **8 caratteri** minimo
    - **1 lettera maiuscola** 
    - **1 lettera minuscola**
    - **1 carattere speciale** (!@#$%^&*)
    
    I controlli di sicurezza sono **abilitabili/disabilitabili** tramite 
    variabile di ambiente `ENABLE_SECURITY_CONTROLS` (default: true).
    
    ## Struttura delle Response
    
    **Tutte le risposte seguono il formato standardizzato:**
    
    ```json
    {
      "data": { 
        // Dati della risposta (opzionale)
      },
      "message": "Messaggio descrittivo specifico",
      "error": {
        // Dettagli errore (solo presente in caso di errore)
      }
    }
    ```
    
    ## Gestione Errori
    
    - **400 Bad Request**: Dati non validi o parametri mancanti
    - **401 Unauthorized**: Token mancante, scaduto o non valido
    - **403 Forbidden**: Permessi insufficienti per l'operazione
    - **404 Not Found**: Risorsa non trovata
    - **409 Conflict**: Conflitto (es. email già esistente)
    - **500 Internal Server Error**: Errore interno del server

    ## Ruoli e Permessi
    
    ### Admin
    Gli amministratori hanno accesso esclusivo alla gestione degli account operatori:
    - ✅ **Gestione Operatori**: Creare, eliminare e gestire account operatori (`/api/operatori`)
    - ❌ **NON possono**: Moderare proposte, vedere commenti globali, accedere ai dati utente
    
    **IMPORTANTE**: Gli admin sono limitati alla gestione degli account operatori e non hanno 
    accesso alle funzionalità di moderazione. Questo è un design di sicurezza intenzionale.
    
    ### Operatori  
    Gli operatori gestiscono la moderazione e la gestione utenti:
    - ✅ **Moderazione**: Approvare/rifiutare proposte (`/api/proposte/pending`)
    - ✅ **Commenti**: Vedere tutti i commenti globali (`/api/proposte/commenti`)
    - ✅ **Utenti**: Vedere tutti i dati utente inclusi email e codice fiscale (`/api/user`)
    - ❌ **NON possono**: Gestire altri operatori
    
    **IMPORTANTE**: Solo gli operatori possono moderare proposte e vedere commenti globali.
    Gli admin non hanno accesso a queste funzionalità per mantenere la separazione dei ruoli.
    
    ### Utenti Privati ed Enti
    Gli utenti normali gestiscono solo i propri contenuti:
    - ✅ **Proposte**: Creare e gestire le proprie proposte
    - ✅ **Commenti**: Commentare proposte approvate
    - ✅ **Follow**: Seguire altri utenti
    - ❌ **NON possono**: Moderare, vedere dati sensibili di altri utenti
    
    ## Separazione dei Ruoli e Sicurezza
    
    ### Design di Sicurezza Intenzionale
    
    **Separazione Admin-Operatori**: Il sistema implementa una separazione intenzionale dei ruoli:
    
    - **Admin**: Gestiscono solo gli account operatori, non hanno accesso ai contenuti
    - **Operatori**: Moderano contenuti e gestiscono utenti, non possono gestire altri operatori
    - **Utenti**: Creano e gestiscono solo i propri contenuti
    
    **Vantaggi di questa separazione**:
    - **Principio del minimo privilegio**: Ogni ruolo ha solo i permessi necessari
    - **Controllo degli accessi**: Gli admin non possono abusare dei privilegi di moderazione
    - **Audit trail**: Separazione chiara delle responsabilità per compliance
    
    **Limitazioni intenzionali**:
    - Gli admin NON possono moderare proposte (endpoint `/api/proposte/pending` bloccato)
    - Gli admin NON possono vedere commenti globali (endpoint `/api/proposte/commenti` bloccato)
    - Gli admin NON possono vedere dati utente completi (endpoint `/api/user` bloccato)
    
    **Se è necessario un ruolo con privilegi elevati**:
    - Creare un account operatore con permessi speciali
    - Utilizzare l'account operatore per le operazioni di moderazione
    - Mantenere l'account admin solo per la gestione degli operatori
    
    ## Modello Utente Unificato
    
    L'API espone un **modello utente unico** con `user_type` che può essere:
    - `"privato"`: Cittadino privato
    - `"ente"`: Ente/organizzazione
    
    **Architettura Backend**: 
    - Nel database esistono due collezioni distinte (`Privato` e `Ente`)
    - Ogni collezione ha il proprio modello con campi specifici
    - L'API unifica le risposte tramite il campo `user_type`
    - L'autenticazione è gestita tramite il modello `Credenziali` condiviso
    
    ### Schemi Utente Disponibili
    
    L'API fornisce diversi schemi utente in base al contesto d'uso:
    
    | Schema | Utilizzo | Dati Inclusi | Accesso |
    |--------|----------|---------------|---------|
    | `UserBase` | Schema base comune | Dati pubblici essenziali | Tutti |
    | `UserSearchResult` | Ricerche e profili pubblici | Dati base + email condizionale | Pubblico/Operatori |
    | `UserComplete` | Profilo personale | Dati completi + credenziali sicure | Solo proprietario |
    | `UserForOperators` | Gestione amministrativa | Dati completi + sensibili | Solo operatori |
    | `UserFollowInfo` | Liste follow | Dati base senza contatori | Pubblico |
    
    **Sicurezza dei Dati**:
    - **Dati pubblici**: Nome, biografia, foto profilo, data creazione (sempre visibili)
    - **Dati sensibili**: Email, codice fiscale (visibili solo agli operatori autenticati)
    - **Endpoint pubblici**: Ricerca e visualizzazione utenti senza autenticazione
    - **Controllo accesso**: Gli operatori vedono tutti i dati, gli altri utenti solo dati pubblici
    
    ### Modello Credenziali
    
    Il modello `Credenziali` gestisce l'autenticazione per tutti i tipi di utente:
    - **Password**: Autenticazione tradizionale (obbligatoria per signup classico)
    - **OAuth**: Autenticazione Google (obbligatoria per signup Google)
    - **Email**: Campo unico per identificazione
    
    **Intercambiabilità**: Password e OAuth sono intercambiabili:
    - Un utente può registrarsi con password e poi collegare Google
    - Un utente può registrarsi con Google e poi impostare una password
    - Entrambi i metodi sono validi per l'autenticazione
    
    ### Campi Calcolati Lato Frontend
    
    **IMPORTANTE**: I seguenti campi NON sono calcolati lato server ma dal frontend:
    - `followersCount`: Numero di follower (calcolato da `followers.length`)
    - `followingCount`: Numero di utenti seguiti (calcolato da `following.length`)
    - `hype`: Per le proposte, equivale alla lunghezza di `listaHyper` (calcolato da `listaHyper.length`)
    
    **Nota**: Il backend fornisce solo gli array completi, i contatori sono calcolati lato client tramite `array.length`.
    
    ### Sicurezza e Visibilità Dati
    
    **Dati sempre visibili** (pubblici):
    - Nome, cognome/nome_org, biografia, foto profilo, data creazione
    
    **Dati visibili solo agli operatori** (autenticati):
    - Email, codice fiscale
    
    **Endpoint pubblici** (senza autenticazione):
    - Ricerca utenti (`/api/user/search`)
    - Visualizzazione profilo utente (`/api/user/{id}`)
    - Lista proposte (`/api/proposte`)
    
    **Nota**: Gli endpoint pubblici restituiscono dati diversi in base al ruolo dell'utente autenticato.
    
    ### Visibilità Condizionale dei Dati Utente
    
    La visibilità dei dati utente varia in base al ruolo dell'utente che fa la richiesta:
    
    | Campo | Pubblico | Autenticato | Operatore |
    |-------|----------|-------------|-----------|
    | `nome`, `biografia`, `fotoProfilo`, `createdAt` | ✅ Sempre | ✅ Sempre | ✅ Sempre |
    | `cognome` (privati) | ✅ Sempre | ✅ Sempre | ✅ Sempre |
    | `nome_org` (enti) | ✅ Sempre | ✅ Sempre | ✅ Sempre |
    | `email` | ❌ Mai | ❌ Mai | ✅ Sempre |
    | `codiceFiscale` | ❌ Mai | ❌ Mai | ✅ Sempre |
    
    **Esempi di utilizzo**:
    - **Endpoint pubblici** (`/api/user/search`, `/api/user/{id}`): Dati base senza email/codice fiscale
    - **Profilo personale** (`/api/user/me`): Dati completi con credenziali sicure
    - **Gestione operatori** (`/api/user`): Dati completi con email e codice fiscale
    
    ## Upload e Limiti
    
    - **Immagini profilo**: Limite 5MB
    - **Immagini proposte**: Limite 5MB (specifico per le proposte)
    - Formati supportati: JPEG, PNG, GIF, WebP
    
    **Nota**: I limiti sono applicati separatamente per profilo e proposte, ma entrambi sono 5MB.

    ## Limitazioni Note e Soluzioni
    
    ### Funzionalità Non Implementate
    
    **Cambio Password**: L'API non fornisce un endpoint per cambiare password esistenti.
    
    **Soluzioni alternative**:
    1. **Per utenti con password dimenticata**: Richiedere supporto tecnico o re-registrazione
    2. **Per utenti OAuth**: Possono continuare a usare Google per l'accesso
    3. **Per implementazione futura**: Aggiungere endpoint `PATCH /api/auth/change-password`
    
    **Reset Password**: Non è implementato un sistema di reset password automatico.
    
    **Soluzioni alternative**:
    1. **Supporto manuale**: Contattare l'amministratore per reset
    2. **Re-registrazione**: Creare nuovo account con stessa email (se supportato)
    3. **OAuth alternativo**: Utilizzare Google Sign-In se disponibile
    
    ### Workaround per Admin
    
    **Se un admin deve moderare contenuti**:
    
    ```bash
    # 1. Creare un account operatore
    POST /api/operatori
    {
      "nome": "Admin Moderatore",
      "email": "admin.moderatore@incrowd.com",
      "password": "OperatorePass123!"
    }
    
    # 2. Fare login con l'account operatore
    POST /api/auth/login
    {
      "email": "admin.moderatore@incrowd.com",
      "password": "OperatorePass123!"
    }
    
    # 3. Utilizzare i permessi di operatore per moderare
    GET /api/proposte/pending    # Vedere proposte in attesa
    PATCH /api/proposte/:id/stato  # Approvare/rifiutare proposte
    GET /api/proposte/commenti   # Vedere commenti globali
    ```
    
    **IMPORTANTE**: Mantenere sempre separati gli account admin e operatore per sicurezza.

servers:
  - url: https://api.incrowd.com
    description: Server di produzione
  - url: http://localhost:3000
    description: Server di sviluppo locale

paths:
  # ROOT E PING
  /:
    get:
      tags:
        - System
      operationId: getWelcomeMessage
      summary: Welcome message
      description: |
        Messaggio di benvenuto dell'API con controlli di sicurezza configurabili.
        
        **Controlli Configurabili**:
        - `ENABLE_SECURITY_CONTROLS`: Abilita/disabilita controlli password (default: true)
        - `JWT_SECRET`: Chiave segreta per firma JWT (obbligatoria)
        - `ADMIN_EMAIL` e `ADMIN_PASSWORD`: Credenziali admin speciali
        
        **Funzionalità**:
        - Endpoint pubblico accessibile senza autenticazione
        - Verifica stato server e configurazione
        - Messaggio di benvenuto personalizzabile
      security: []
      responses:
        '200':
          description: Messaggio di benvenuto
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Benvenuti nelle API di InCrowd"
        '500':
          description: Errore configurazione server
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Errore configurazione server"
                  error:
                    type: object
                    properties:
                      details:
                        type: string
                        example: "JWT_SECRET non definito"
        '400':
          description: Richiesta non valida
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Parametri richiesta non validi"

  /ping:
    get:
      tags:
        - System
      operationId: getHealthCheck
      summary: Health check
      description: Verifica lo stato del server
      security: []
      responses:
        '200':
          description: Server operativo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "ok"
                      timestamp:
                        type: string
                        format: date-time
                        example: "2025-08-19T14:30:00.000Z"
                  message:
                    type: string
                    example: "Server is running"
        '400':
          description: Richiesta non valida
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Parametri richiesta non validi"

  # AUTH
  /api/auth/login:
    post:
      tags:
        - Authentication
      operationId: loginUser
      summary: Login utente
      description: Autentica un utente e restituisce JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "mario.rossi@email.com"
                password:
                  type: string
                  example: "Password123!"
      responses:
        '200':
          description: Login completato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIs..."
                      user:
                        $ref: '#/components/schemas/UserComplete'
                  message:
                    type: string
                    example: "Login completato con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/google:
    post:
      tags:
        - Authentication
      operationId: loginGoogleOAuth
      summary: Login Google OAuth
      description: |
        Autentica un utente tramite Google OAuth e restituisce JWT token.
        
        **Flusso**:
        1. Frontend ottiene `idToken` da Google Sign-In
        2. Frontend invia `idToken` a questo endpoint
        3. Backend verifica il token con Google
        4. Se l'utente esiste, restituisce JWT
        5. Se l'utente non esiste, restituisce `needsRegistration: true`
        
        **Casi d'uso**:
        - Login utente esistente con Google
        - Verifica utente per registrazione Google
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idToken
              properties:
                idToken:
                  type: string
                  example: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFiYzFm..."
                  description: "ID token ottenuto da Google Sign-In"
      responses:
        '200':
          description: Login Google completato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIs..."
                      user:
                        $ref: '#/components/schemas/UserComplete'
                  message:
                    type: string
                    example: "Login Google completato con successo"
        '404':
          description: Utente non trovato - registrazione necessaria
          content:
            application/json:
              schema:
                type: object
                properties:
                  needsRegistration:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Registrazione necessaria per questo account Google"
                  googleData:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "mario.rossi@gmail.com"
                      nome:
                        type: string
                        example: "Mario"
                      cognome:
                        type: string
                        example: "Rossi"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/link-google:
    post:
      tags:
        - Authentication
      operationId: linkGoogleAccount
      summary: Collega account Google
      description: |
        Collega un account Google esistente all'utente autenticato.
        
        **Requisiti**:
        - Utente deve essere autenticato
        - Account Google non deve essere già collegato ad altri utenti
        
        **Flusso**:
        1. Utente autenticato ottiene `idToken` da Google
        2. Frontend invia `idToken` a questo endpoint
        3. Backend verifica e collega l'account
        4. Utente può ora fare login con Google o password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idToken
              properties:
                idToken:
                  type: string
                  example: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFiYzFm..."
                  description: "ID token ottenuto da Google Sign-In"
      responses:
        '200':
          description: Account Google collegato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account Google collegato con successo"
        '409':
          description: Account Google già collegato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account Google già collegato ad un altro utente"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/password:
    patch:
      tags:
        - Authentication
      operationId: setPassword
      summary: Imposta password per utenti senza password
      description: |
        Imposta la password per utenti (privati ed enti) che non ne hanno una.
        
        **IMPORTANTE**: Questo endpoint NON permette di cambiare una password esistente.
        È utilizzato solo per impostare una password per utenti che si sono registrati 
        tramite Google OAuth e non hanno ancora impostato una password tradizionale.
        
        **Requisiti**:
        - Utente deve essere autenticato
        - Utente non deve avere già una password impostata
        
        **Casi d'uso**:
        - Utenti registrati con Google che vogliono aggiungere una password
        - Completamento profilo per utenti OAuth-only
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newPassword
              properties:
                newPassword:
                  type: string
                  example: "NewPassword456!"
                  description: "Nuova password da impostare. Deve rispettare i requisiti di sicurezza"
      responses:
        '200':
          description: Password impostata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserComplete'
                  message:
                    type: string
                    example: "Password impostata con successo"
        '400':
          description: Password già esistente o dati non validi
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "La password è già stata impostata. Usa la funzione di cambio password."
                  error:
                    type: object
                    properties:
                      details:
                        type: array
                        items:
                          type: string
                        example: ["La password deve contenere almeno una lettera maiuscola"]
        '401':
          $ref: '#/components/responses/Unauthorized'

  # USER (UNIFICATO)
  /api/user:
    get:
      tags:
        - Users
      operationId: getAllUsers
      summary: Lista tutti gli utenti
      description: |
        Recupera tutti gli utenti (solo per operatori).
        
        **Accesso**: Solo operatori autenticati (NO admin)
        **Dati inclusi**: Nome, biografia, foto profilo, email, codice fiscale
        **Sicurezza**: Include dati sensibili non visibili agli utenti pubblici
        **Utilizzo**: Per gestione amministrativa e moderazione
        
        **IMPORTANTE**: Gli admin non possono accedere a questo endpoint per vedere i dati utente.
        Gli admin possono solo gestire gli account operatori. Questa è una limitazione 
        di sicurezza intenzionale per mantenere la separazione dei ruoli.
        
        **Per vedere i dati utente come admin**:
        1. Creare un account operatore tramite `/api/operatori`
        2. Utilizzare l'account operatore per accedere a questo endpoint
        3. Mantenere l'account admin solo per la gestione degli operatori
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista utenti recuperata
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserForOperators'
                      total:
                        type: integer
                        example: 150
                  message:
                    type: string
                    example: "Utenti recuperati con successo"
        '403':
          description: Accesso negato - solo gli operatori possono vedere i dati utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accesso negato - solo gli operatori possono vedere i dati utente"
                  error:
                    type: string
                    example: "FORBIDDEN"
                  details:
                    type: object
                    properties:
                      requiredRole:
                        type: string
                        example: "operatore"
                      currentRole:
                        type: string
                        example: "admin"
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Users
      operationId: createUser
      summary: Crea nuovo utente
      description: |
        Crea un nuovo utente (privato o ente) con validazione dei dati.
        
        **Campi obbligatori per tutti:**
        - user_type ('privato' | 'ente')
        - nome, codiceFiscale, email, password
        
        **Campi specifici per privati:**
        - cognome (obbligatorio)
        
        **Campi specifici per enti:**
        - nome_org (obbligatorio)
        - nome (opzionale, referente)
      security: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - user_type
                - nome
                - codiceFiscale
                - email
                - password
              properties:
                user_type:
                  type: string
                  enum: [privato, ente]
                  example: "privato"
                nome:
                  type: string
                  example: "Mario"
                cognome:
                  type: string
                  example: "Rossi"
                  description: "Obbligatorio per user_type='privato'"
                nome_org:
                  type: string
                  example: "Comune di Roma"
                  description: "Obbligatorio per user_type='ente'"
                codiceFiscale:
                  type: string
                  example: "RSSMRA80A01H501U"
                biografia:
                  type: string
                  example: "Descrizione profilo utente"
                email:
                  type: string
                  format: email
                  example: "mario.rossi@email.com"
                password:
                  type: string
                  example: "Password123!"
                  description: "Deve rispettare i requisiti di sicurezza"
                fotoProfilo:
                  type: string
                  format: binary
                  description: "Immagine profilo (max 5MB)"
      responses:
        '201':
          description: Utente creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserSearchResult'
                  message:
                    type: string
                    example: "Utente creato con successo"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email già registrata
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email già registrata"

  /api/user/me:
    get:
      tags:
        - Users
      operationId: getCurrentUserProfile
      summary: Profilo utente corrente
      description: Recupera il profilo completo dell'utente autenticato
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profilo recuperato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserComplete'
                  message:
                    type: string
                    example: "Profilo recuperato con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/user/profile:
    patch:
      tags:
        - Users
      operationId: updateUserProfile
      summary: Aggiorna profilo
      description: Aggiorna il profilo dell'utente autenticato
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nome:
                  type: string
                  example: "Mario"
                cognome:
                  type: string
                  example: "Rossi"
                  description: "Solo per utenti privati"
                nome_org:
                  type: string
                  example: "Comune di Milano"
                  description: "Solo per enti"
                biografia:
                  type: string
                  example: "Nuova biografia"
                fotoProfilo:
                  type: string
                  format: binary
                  description: "Nuova immagine profilo (max 5MB)"
      responses:
        '200':
          description: Profilo aggiornato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserComplete'
                  message:
                    type: string
                    example: "Profilo aggiornato con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/user/account:
    delete:
      tags:
        - Users
      operationId: deleteUserAccount
      summary: Elimina account
      description: Elimina l'account dell'utente autenticato
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account eliminato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account eliminato con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/user/search:
    get:
      tags:
        - Users
      operationId: searchUsers
      summary: Cerca utenti
      description: |
        Cerca utenti per nome, cognome, nome_org o biografia.
        
        **Sicurezza**: 
        - Endpoint pubblico accessibile senza autenticazione
        - Email e dati sensibili sono visibili solo agli operatori autenticati
        - Utenti non autenticati vedono solo dati pubblici (nome, biografia, foto)
        
        **Esempi di ricerca:**
        - `?q=Mario` - Cerca "Mario" in tutti i campi
        - `?q=Comune&user_type=ente` - Cerca "Comune" solo negli enti
        - `?q=sviluppatore&limit=20` - Cerca "sviluppatore" con limite 20 risultati
      security: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 2
          example: "Mario"
          description: "Query di ricerca (minimo 2 caratteri)"
        - name: user_type
          in: query
          schema:
            type: string
            enum: [privato, ente]
          example: "privato"
          description: "Filtra per tipo utente"
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
      responses:
        '200':
          description: Risultati ricerca
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserSearchResult'
                      total:
                        type: integer
                        example: 25
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                  message:
                    type: string
                    example: "Ricerca completata"
              examples:
                mixed_results:
                  summary: Risultati misti (privati ed enti)
                  value:
                    data:
                      users:
                        - _id: "64a1b2c3d4e5f678901234"
                          user_type: "privato"
                          nome: "Mario"
                          cognome: "Rossi"
                          biografia: "Sviluppatore"
                          email: "mario.rossi@email.com"
                        - _id: "64a1b2c3d4e5f678901235"
                          user_type: "ente"
                          nome_org: "Comune di Roma"
                          nome: "Mario"
                          biografia: "Amministrazione comunale"
                          email: "mario.bianchi@comune.roma.it"
                      total: 2
                    message: "Ricerca completata"
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/user/{id}:
    get:
      tags:
        - Users
      operationId: getUserById
      summary: Dettagli utente
      description: |
        Recupera i dettagli di un utente specifico.
        
        **Sicurezza**:
        - Endpoint pubblico accessibile senza autenticazione
        - Email e dati sensibili sono visibili solo agli operatori autenticati
        - Utenti non autenticati vedono solo dati pubblici (nome, biografia, foto)
        
        **Esempi di risposta per diversi tipi:**
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
      responses:
        '200':
          description: Dettagli utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserSearchResult'
                  message:
                    type: string
                    example: "Utente recuperato con successo"
              examples:
                user_privato:
                  summary: Esempio utente privato (operatore autenticato)
                  description: "Nota: email è visibile solo agli operatori"
                  value:
                    data:
                      user:
                        _id: "64a1b2c3d4e5f678901234"
                        user_type: "privato"
                        nome: "Mario"
                        cognome: "Rossi"
                        biografia: "Sviluppatore software"
                        email: "mario.rossi@email.com"
                        fotoProfilo:
                          data: "iVBORw0KGgoAAAANSUhEUgAA..."
                          contentType: "image/jpeg"
                        createdAt: "2024-01-15T10:30:00.000Z"
                    message: "Utente recuperato con successo"
                user_privato_public:
                  summary: Esempio utente privato (utente non autenticato)
                  description: "Nota: email non è presente per utenti non operatori"
                  value:
                    data:
                      user:
                        _id: "64a1b2c3d4e5f678901234"
                        user_type: "privato"
                        nome: "Mario"
                        cognome: "Rossi"
                        biografia: "Sviluppatore software"
                        fotoProfilo:
                          data: "iVBORw0KGgoAAAANSUhEUgAA..."
                          contentType: "image/jpeg"
                        createdAt: "2024-01-15T10:30:00.000Z"
                    message: "Utente recuperato con successo"
                user_ente:
                  summary: Esempio ente
                  description: "Nota: email è sempre presente per profili pubblici"
                  value:
                    data:
                      user:
                        _id: "64a1b2c3d4e5f678901235"
                        user_type: "ente"
                        nome_org: "Comune di Roma"
                        nome: "Mario Bianchi"
                        biografia: "Amministrazione comunale"
                        email: "mario.bianchi@comune.roma.it"
                        fotoProfilo:
                          data: "image/png"
                        createdAt: "2024-02-20T14:15:00.000Z"
                    message: "Utente recuperato con successo"
                user_ente_public:
                  summary: Esempio ente (utente non autenticato)
                  description: "Nota: email non è presente per utenti non operatori"
                  value:
                    data:
                      user:
                        _id: "64a1b2c3d4e5f678901235"
                        user_type: "ente"
                        nome_org: "Comune di Roma"
                        nome: "Mario Bianchi"
                        biografia: "Amministrazione comunale"
                        fotoProfilo:
                          data: "image/png"
                        createdAt: "2024-02-20T14:15:00.000Z"
                    message: "Utente recuperato con successo"
        '404':
          $ref: '#/components/responses/NotFound'

  /api/user/{id}/avatar:
    get:
      tags:
        - Users
      operationId: getUserAvatar
      summary: Avatar utente
      description: Recupera solo l'avatar di un utente
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
      responses:
        '200':
          description: Avatar recuperato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      fotoProfilo:
                        $ref: '#/components/schemas/Allegato'
                  message:
                    type: string
                    example: "Avatar recuperato"
        '404':
          $ref: '#/components/responses/NotFound'

  # PROPOSTE
  /api/proposte:
    get:
      tags:
        - Proposte
      operationId: getApprovedProposte
      summary: Lista proposte approvate
      description: |
        Recupera tutte le proposte approvate pubblicamente.
        
        **Filtri applicati**:
        - Solo proposte con stato "approvata"
        - Ordinate per data di creazione (più recenti prima)
        - Accesso pubblico senza autenticazione
        
        **Campi inclusi**:
        - Dati base della proposta
        - Proponente (ID e tipo)
        - Contatori calcolati (hype = listaHyper.length)
      security: []
      responses:
        '200':
          description: Lista proposte recuperata
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      proposte:
                        type: array
                        items:
                          $ref: '#/components/schemas/Proposta'
                      total:
                        type: integer
                        example: 50
                  message:
                    type: string
                    example: "Proposte recuperate con successo"
        '400':
          description: Parametri richiesta non validi
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Parametri richiesta non validi"
        '500':
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Errore nel recupero proposte"
                  error:
                    type: object
    post:
      tags:
        - Proposte
      operationId: createProposta
      summary: Crea nuova proposta
      description: |
        Crea una nuova proposta con upload immagine opzionale.
        
        **Accesso**: Solo utenti autenticati (privati ed enti)
        **Upload**: Immagine opzionale (max 5MB, formati: JPEG, PNG, GIF, WebP)
        **Stato iniziale**: "bozza" (richiede approvazione operatore)
        **Validazioni**: Titolo e descrizione obbligatori
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - titolo
                - descrizione
              properties:
                titolo:
                  type: string
                  example: "Nuovo parco cittadino"
                  description: "Titolo della proposta"
                descrizione:
                  type: string
                  example: "Creazione di un parco pubblico"
                  description: "Descrizione dettagliata"
                categoria:
                  type: string
                  example: "Ambiente"
                  description: "Categoria della proposta"
                luogo:
                  type: object
                  properties:
                    via:
                      type: string
                      example: "Via Roma, 123"
                    citta:
                      type: string
                      example: "Roma"
                    cap:
                      type: string
                      example: "00100"
                    provincia:
                      type: string
                      example: "RM"
                dataIpotetica:
                  type: string
                  format: date-time
                  example: "2024-06-15T10:00:00.000Z"
                  description: "Data ipotetica di realizzazione"
                foto:
                  type: string
                  format: binary
                  description: "Immagine della proposta (max 5MB, JPEG/PNG/GIF/WebP)"
      responses:
        '201':
          description: Proposta creata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      proposta:
                        $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
                    example: "Proposta creata con successo"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/proposte/commenti:
    get:
      tags:
        - Proposte
      operationId: getGlobalCommenti
      summary: Ultimi commenti globali
      description: |
        Recupera tutti i commenti da tutte le proposte (solo operatori).
        
        **Accesso**: Solo operatori autenticati (NO admin)
        **Ordinamento**: Per data commento (più recenti prima)
        **Dati inclusi**: Proposta (titolo, ID) e utente (nome, cognome)
        
        **IMPORTANTE**: Gli admin non possono accedere a questo endpoint per vedere commenti globali.
        Gli admin possono solo gestire gli account operatori. Questa è una limitazione 
        di sicurezza intenzionale per mantenere la separazione dei ruoli.
        
        **Per vedere commenti globali come admin**:
        1. Creare un account operatore tramite `/api/operatori`
        2. Utilizzare l'account operatore per accedere a questo endpoint
        3. Mantenere l'account admin solo per la gestione degli operatori
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Commenti recuperati
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      commenti:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                            contenuto:
                              type: string
                            dataOra:
                              type: string
                              format: date-time
                            proposta:
                              type: object
                              properties:
                                _id:
                                  type: string
                                titolo:
                                  type: string
                            utente:
                              type: object
                              properties:
                                _id:
                                  type: string
                                nome:
                                  type: string
                                cognome:
                                  type: string
                  message:
                    type: string
                    example: "Tutti i commenti"
        '403':
          description: Accesso negato - solo gli operatori possono vedere i commenti globali
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accesso negato - solo gli operatori possono vedere i commenti globali"
                  error:
                    type: string
                    example: "FORBIDDEN"
                  details:
                    type: object
                    properties:
                      requiredRole:
                        type: string
                        example: "operatore"
                      currentRole:
                        type: string
                        example: "admin"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/proposte/my:
    get:
      tags:
        - Proposte
      operationId: getMyProposte
      summary: Proposte utente corrente
      description: |
        Recupera tutte le proposte dell'utente autenticato.
        
        **Accesso**: Solo utenti autenticati (privati ed enti)
        **Filtri**: Tutti gli stati (bozza, pubblicata, in_corso, completata, respinta)
        **Ordinamento**: Per data di creazione (più recenti prima)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Proposte utente recuperate
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      proposte:
                        type: array
                        items:
                          $ref: '#/components/schemas/Proposta'
                      total:
                        type: integer
                        example: 15
                  message:
                    type: string
                    example: "Proposte utente recuperate"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/proposte/followed:
    get:
      tags:
        - Proposte
      operationId: getFollowedProposte
      summary: Proposte utenti seguiti
      description: |
        Recupera le proposte approvate degli utenti seguiti dall'utente corrente.
        
        **Accesso**: Solo utenti autenticati
        **Filtri**: Solo proposte approvate
        **Ordinamento**: Per data di creazione (più recenti prima)
        **Limitazioni**: Solo proposte di utenti attualmente seguiti
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Proposte utenti seguiti recuperate
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      proposte:
                        type: array
                        items:
                          $ref: '#/components/schemas/Proposta'
                      total:
                        type: integer
                        example: 25
                  message:
                    type: string
                    example: "Proposte utenti seguiti recuperate"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/proposte/search:
    get:
      tags:
        - Proposte
      operationId: searchProposte
      summary: Ricerca proposte
      description: |
        Cerca proposte per testo, categoria, città o stato.
        
        **Parametri di ricerca**:
        - `q`: Testo libero (titolo, descrizione)
        - `categoria`: Filtra per categoria specifica
        - `citta`: Filtra per città
        - `stato`: Filtra per stato (bozza, pubblicata, in_corso, completata, respinta)
        - `sortBy`: Ordinamento (createdAt, listaHyper, titolo)
        - `sortOrder`: Direzione ordinamento (asc, desc)
        
        **Accesso**: Pubblico senza autenticazione
        **Filtri**: Solo proposte approvate
      security: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
          example: "parco"
          description: "Testo di ricerca libera"
        - name: categoria
          in: query
          schema:
            type: string
          example: "Ambiente"
          description: "Categoria specifica"
        - name: citta
          in: query
          schema:
            type: string
          example: "Roma"
          description: "Città specifica"
        - name: stato
          in: query
          schema:
            type: string
            enum: [bozza, pubblicata, in_corso, completata, respinta]
          example: "pubblicata"
          description: "Stato della proposta"
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [createdAt, listaHyper, titolo]
          example: "createdAt"
          description: "Campo per ordinamento"
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
          example: "desc"
          description: "Direzione ordinamento"
      responses:
        '200':
          description: Risultati ricerca
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      proposte:
                        type: array
                        items:
                          $ref: '#/components/schemas/Proposta'
                      total:
                        type: integer
                        example: 12
                  message:
                    type: string
                    example: "Ricerca completata"
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/proposte/user/{userId}:
    get:
      tags:
        - Proposte
      operationId: getProposteByUser
      summary: Proposte utente specifico
      description: |
        Recupera le proposte approvate di un utente specifico.
        
        **Accesso**: Pubblico senza autenticazione
        **Filtri**: Solo proposte approvate
        **Ordinamento**: Per data di creazione (più recenti prima)
        **Utente**: Può essere privato o ente (identificato automaticamente)
      security: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID dell'utente (privato o ente)"
      responses:
        '200':
          description: Proposte utente recuperate
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      proposte:
                        type: array
                        items:
                          $ref: '#/components/schemas/Proposta'
                      total:
                        type: integer
                        example: 8
                  message:
                    type: string
                    example: "Proposte utente recuperate"
        '404':
          $ref: '#/components/responses/NotFound'

  /api/proposte/pending:
    get:
      tags:
        - Proposte
      operationId: getPendingProposte
      summary: Proposte in attesa di moderazione
      description: |
        Recupera le proposte in attesa di approvazione (solo operatori).
        
        **Accesso**: Solo operatori autenticati (NO admin)
        **Stato**: Solo proposte con stato "bozza"
        **Ordinamento**: Per data di creazione (più recenti prima)
        **Utilizzo**: Per moderazione e revisione proposte
        
        **IMPORTANTE**: Gli admin non possono accedere a questo endpoint per moderare proposte.
        Gli admin possono solo gestire gli account operatori. Questa è una limitazione 
        di sicurezza intenzionale per mantenere la separazione dei ruoli.
        
        **Per moderare proposte come admin**:
        1. Creare un account operatore tramite `/api/operatori`
        2. Utilizzare l'account operatore per accedere a questo endpoint
        3. Mantenere l'account admin solo per la gestione degli operatori
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Proposte in attesa recuperate
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      proposte:
                        type: array
                        items:
                          $ref: '#/components/schemas/Proposta'
                      total:
                        type: integer
                        example: 5
                  message:
                    type: string
                    example: "Proposte in attesa recuperate"
        '403':
          description: Accesso negato - solo gli operatori possono moderare le proposte
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accesso negato - solo gli operatori possono moderare le proposte"
                  error:
                    type: string
                    example: "FORBIDDEN"
                  details:
                    type: object
                    properties:
                      requiredRole:
                        type: string
                        example: "operatore"
                      currentRole:
                        type: string
                        example: "admin"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/proposte/{id}:
    get:
      tags:
        - Proposte
      operationId: getPropostaById
      summary: Dettagli proposta
      description: |
        Recupera i dettagli completi di una proposta specifica.
        
        **Accesso**: Pubblico senza autenticazione
        **Dati inclusi**: Tutti i campi della proposta, proponente, commenti
        **Stato**: Solo proposte approvate sono visibili pubblicamente
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID della proposta"
      responses:
        '200':
          description: Dettagli proposta recuperati
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      proposta:
                        $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
                    example: "Proposta recuperata con successo"
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Proposte
      operationId: deleteProposta
      summary: Elimina proposta
      description: |
        Elimina una proposta e tutti i suoi commenti.
        
        **Accesso**: Solo il proponente, operatori o admin
        **Validazioni**: Proposta deve esistere e appartenere all'utente
        **Sicurezza**: Solo il proprietario può eliminare le proprie proposte
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID della proposta"
      responses:
        '200':
          description: Proposta eliminata
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Proposta eliminata con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/proposte/{id}/hyper:
    patch:
      tags:
        - Proposte
      operationId: togglePropostaHype
      summary: Toggle hype proposta
      description: |
        Aggiunge o rimuove l'utente corrente dalla lista hype della proposta.
        
        **Accesso**: Solo utenti autenticati (privati ed enti)
        **Funzionamento**: Se l'utente è già nella lista, viene rimosso; altrimenti viene aggiunto
        **Risultato**: Lista hype aggiornata (il contatore è calcolato lato frontend)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID della proposta"
      responses:
        '200':
          description: Hype aggiornato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      listaHyper:
                        type: array
                        items:
                          type: string
                        example: ["64a1b2c3d4e5f678901236", "64a1b2c3d4e5f678901237"]
                      message:
                        type: string
                        example: "Hype aggiornato"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/proposte/{id}/commenti:
    get:
      tags:
        - Proposte
      operationId: getPropostaCommenti
      summary: Lista commenti proposta
      description: |
        Recupera tutti i commenti di una proposta specifica.
        
        **Accesso**: Pubblico senza autenticazione
        **Ordinamento**: Per data commento (più recenti prima)
        **Dati inclusi**: Contenuto, data, utente (nome, cognome)
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID della proposta"
      responses:
        '200':
          description: Commenti recuperati
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      commenti:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                            contenuto:
                              type: string
                            dataOra:
                              type: string
                              format: date-time
                            utente:
                              type: object
                              properties:
                                _id:
                                  type: string
                                nome:
                                  type: string
                                cognome:
                                  type: string
                      total:
                        type: integer
                        example: 8
                  message:
                    type: string
                    example: "Commenti recuperati"
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Proposte
      operationId: addPropostaCommento
      summary: Aggiungi commento
      description: |
        Aggiunge un nuovo commento a una proposta.
        
        **Accesso**: Solo utenti autenticati (privati ed enti)
        **Validazioni**: Contenuto obbligatorio e non vuoto
        **Stato**: Solo proposte approvate possono ricevere commenti
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID della proposta"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contenuto
              properties:
                contenuto:
                  type: string
                  example: "Ottima idea! Sostengo questa proposta"
                  description: "Testo del commento"
      responses:
        '201':
          description: Commento aggiunto
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      commento:
                        type: object
                        properties:
                          _id:
                            type: string
                          contenuto:
                            type: string
                          dataOra:
                            type: string
                            format: date-time
                  message:
                    type: string
                    example: "Commento aggiunto con successo"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/proposte/{id}/stato:
    patch:
      tags:
        - Proposte
      operationId: updatePropostaStato
      summary: Aggiorna stato proposta
      description: |
        Aggiorna lo stato di una proposta (moderazione).
        
        **Accesso**: Solo operatori e admin
        **Stati possibili**: bozza, pubblicata, in_corso, completata, respinta
        **Commento**: Opzionale per spiegare il cambio di stato
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID della proposta"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - stato
              properties:
                stato:
                  type: string
                  enum: [bozza, pubblicata, in_corso, completata, respinta]
                  example: "pubblicata"
                  description: "Nuovo stato della proposta"
                commento:
                  type: string
                  example: "Proposta approvata e pubblicata"
                  description: "Commento opzionale per il cambio di stato"
      responses:
        '200':
          description: Stato aggiornato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      proposta:
                        $ref: '#/components/schemas/Proposta'
                  message:
                    type: string
                    example: "Stato proposta aggiornato"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/proposte/{propostaId}/commenti/{commentoId}:
    delete:
      tags:
        - Proposte
      operationId: deletePropostaCommento
      summary: Elimina commento
      description: |
        Elimina un commento specifico da una proposta.
        
        **Accesso**: Solo il creatore del commento o operatori/admin
        **Validazioni**: Commento deve esistere e appartenere alla proposta
        **Sicurezza**: Solo il proprietario può eliminare i propri commenti
      security:
        - bearerAuth: []
      parameters:
        - name: propostaId
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID della proposta"
        - name: commentoId
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901235"
          description: "ID del commento"
      responses:
        '200':
          description: Commento eliminato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Commento eliminato con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # FOLLOW
  /api/follow/{userId}:
    post:
      tags:
        - Follow
      operationId: followUser
      summary: Segui utente
      description: |
        Segue un utente specifico (privato o ente).
        
        **Accesso**: Solo utenti autenticati (privati ed enti)
        **Validazioni**: Utente da seguire deve esistere e non essere già seguito
        **Risultato**: Relazione di follow creata (il contatore è calcolato lato frontend)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID dell'utente da seguire"
      responses:
        '200':
          description: Utente seguito con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utente seguito con successo"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Follow
      operationId: unfollowUser
      summary: Smetti di seguire utente
      description: |
        Smette di seguire un utente specifico.
        
        **Accesso**: Solo utenti autenticati
        **Validazioni**: Relazione di follow deve esistere
        **Risultato**: Relazione di follow rimossa (il contatore è calcolato lato frontend)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID dell'utente da smettere di seguire"
      responses:
        '200':
          description: Follow rimosso con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Follow rimosso con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/follow/followers/{userId}:
    get:
      tags:
        - Follow
      operationId: getUserFollowers
      summary: Lista followers
      description: |
        Recupera la lista dei follower di un utente specifico.
        
        **Accesso**: Pubblico senza autenticazione
        **Dati inclusi**: ID e dati base degli utenti follower
        **Ordinamento**: Per data di follow (più recenti prima)
        **Nota**: I contatori followersCount e followingCount sono calcolati lato frontend tramite array.length
      security: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID dell'utente"
      responses:
        '200':
          description: Followers recuperati
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      followers:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserFollowInfo'
                      total:
                        type: integer
                        example: 15
                        description: "Numero totale di followers (calcolato lato server per paginazione)"
                  message:
                    type: string
                    example: "Followers recuperati"
        '404':
          $ref: '#/components/responses/NotFound'

  /api/follow/following/{userId}:
    get:
      tags:
        - Follow
      operationId: getUserFollowing
      summary: Lista following
      description: |
        Recupera la lista degli utenti seguiti da un utente specifico.
        
        **Accesso**: Pubblico senza autenticazione
        **Dati inclusi**: ID e dati base degli utenti seguiti
        **Ordinamento**: Per data di follow (più recenti prima)
        **Nota**: I contatori followersCount e followingCount sono calcolati lato frontend tramite array.length
      security: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID dell'utente"
      responses:
        '200':
          description: Following recuperati
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      following:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserFollowInfo'
                      total:
                        type: integer
                        example: 8
                        description: "Numero totale di following (calcolato lato server per paginazione)"
                  message:
                    type: string
                    example: "Following recuperati"
        '404':
          $ref: '#/components/responses/NotFound'

  /api/follow/status/{userId}:
    get:
      tags:
        - Follow
      operationId: getFollowStatus
      summary: Status follow
      description: |
        Verifica se l'utente corrente segue un utente specifico.
        
        **Accesso**: Solo utenti autenticati
        **Risultato**: Boolean che indica se l'utente è seguito
        **Utilizzo**: Per mostrare stato pulsante follow/unfollow
        **Nota**: I contatori followersCount e followingCount sono calcolati lato frontend tramite array.length
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
          description: "ID dell'utente da verificare"
      responses:
        '200':
          description: Status follow verificato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      isFollowing:
                        type: boolean
                        example: true
                        description: "Indica se l'utente corrente segue l'utente target"
                  message:
                    type: string
                    example: "Status follow verificato"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # OPERATORI
  /api/operatori:
    get:
      tags:
        - Operatori
      operationId: getAllOperatori
      summary: Lista operatori
      description: Recupera tutti gli operatori (solo admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista operatori
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      operatori:
                        type: array
                        items:
                          $ref: '#/components/schemas/Operatore'
                  message:
                    type: string
                    example: "Operatori recuperati con successo"
        '403':
          description: Solo admin possono accedere
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accesso negato. Permessi amministrativi richiesti"

    post:
      tags:
        - Operatori
      operationId: createOperatore
      summary: Crea operatore
      description: Crea un nuovo operatore (solo admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nome
                - email
                - password
              properties:
                nome:
                  type: string
                  example: "Luigi"
                email:
                  type: string
                  format: email
                  example: "luigi.verdi@incrowd.com"
                password:
                  type: string
                  example: "OperatorePass123!"
      responses:
        '201':
          description: Operatore creato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      operatore:
                        $ref: '#/components/schemas/Operatore'
                  message:
                    type: string
                    example: "Operatore creato con successo"
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/operatori/{id}:
    delete:
      tags:
        - Operatori
      operationId: deleteOperatore
      summary: Elimina operatore
      description: Elimina un operatore (solo admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
      responses:
        '200':
          description: Operatore eliminato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Operatore eliminato con successo"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/operatori/stats:
    get:
      tags:
        - Operatori
      operationId: getOperatoreStats
      summary: Statistiche operatore
      description: Recupera le statistiche dell'operatore autenticato
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistiche recuperate
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      stats:
                        type: object
                        properties:
                          totalProposte:
                            type: integer
                            example: 150
                          proposteAttive:
                            type: integer
                            example: 120
                          totalUtenti:
                            type: integer
                            example: 500
                  message:
                    type: string
                    example: "Statistiche recuperate"
        '403':
          description: Solo operatori possono accedere
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accesso riservato agli operatori"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Token JWT ottenuto tramite login. Il token contiene:
        - `userId`: ID dell'utente
        - `email`: Email dell'utente  
        - `userType`: Tipo utente (privato/ente/operatore/admin)

  schemas:
    # Schema base per tutti gli utenti
    UserBase:
      type: object
      required:
        - _id
        - user_type
        - nome
        - createdAt
      properties:
        _id:
          type: string
          example: "64a1b2c3d4e5f678901234"
        user_type:
          type: string
          enum: [privato, ente]
          example: "privato"
          description: |
            Tipo utente unificato (campo principale):
            - `"privato"`: Cittadino privato
            - `"ente"`: Ente/organizzazione
        nome:
          type: string
          example: "Mario"
        biografia:
          type: string
          example: "Descrizione del profilo"
        fotoProfilo:
          $ref: '#/components/schemas/Allegato'
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    # Utente per ricerche e profili pubblici (con visibilità condizionale email)
    UserSearchResult:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            cognome:
              type: string
              example: "Rossi"
              description: "Cognome dell'utente. Presente solo per user_type='privato'"
            nome_org:
              type: string
              example: "Comune di Roma" 
              description: "Nome dell'organizzazione. Presente solo per user_type='ente'"
            email:
              type: string
              format: email
              example: "mario.rossi@email.com"
              description: |
                Email dell'utente. Visibilità condizionale:
                - **Sempre presente** per operatori autenticati
                - **Mai presente** per utenti non autenticati o non operatori
                - **Campo opzionale** per compatibilità API
              nullable: true
              x-visibility: "operatori-only"

    # Utente per profilo personale (con credenziali sicure e dati completi)
    UserComplete:
      allOf:
        - $ref: '#/components/schemas/UserSearchResult'
        - type: object
          required:
            - codiceFiscale
            - credenziali
            - updatedAt
          properties:
            codiceFiscale:
              type: string
              example: "RSSMRA80A01H501U"
              description: "Codice fiscale dell'utente (sempre presente per profilo personale)"
            credenziali:
              type: object
              required:
                - email
                - hasPassword
              properties:
                email:
                  type: string
                  format: email
                  example: "mario.rossi@email.com"
                  description: "Email dell'utente (sempre presente per profilo personale)"
                hasPassword:
                  type: boolean
                  example: true
                  description: |
                    Indica se l'utente ha impostato una password:
                    - `true`: L'utente ha una password tradizionale
                    - `false`: L'utente usa solo OAuth (es. Google)
            updatedAt:
              type: string
              format: date-time
              example: "2024-01-20T15:45:00.000Z"
              description: "Data dell'ultimo aggiornamento del profilo"

    # Utente per gestione operatori (con email e dati sensibili sempre presenti)
    UserForOperators:
      allOf:
        - $ref: '#/components/schemas/UserSearchResult'
        - type: object
          required:
            - email
            - codiceFiscale
          properties:
            email:
              type: string
              format: email
              example: "mario.rossi@email.com"
              description: "Email dell'utente (sempre presente per operatori)"
            codiceFiscale:
              type: string
              example: "RSSMRA80A01H501U"
              description: "Codice fiscale dell'utente (sempre presente per operatori)"

    # Utente per liste follow (senza contatori, solo dati base)
    UserFollowInfo:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            cognome:
              type: string
              example: "Rossi"
              description: "Cognome dell'utente. Presente solo per user_type='privato'"
            nome_org:
              type: string
              example: "Comune di Roma" 
              description: "Nome dell'organizzazione. Presente solo per user_type='ente'"
            userType:
              type: string
              enum: [privato, ente]
              example: "privato"
              description: |
                Tipo utente (campo legacy per compatibilità):
                - `privato`: Cittadino privato
                - `ente`: Ente/organizzazione
                
                **Nota**: Preferire sempre il campo `user_type` per nuove implementazioni

    # Operatore per gestione admin
    Operatore:
      type: object
      required:
        - _id
        - nome
        - cognome
        - email
      properties:
        _id:
          type: string
          example: "64a1b2c3d4e5f678901234"
        nome:
          type: string
          example: "Luigi"
        cognome:
          type: string
          example: "Verdi"
        email:
          type: string
          format: email
          example: "luigi.verdi@incrowd.com"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-10T09:20:00.000Z"

    Proposta:
      type: object
      description: |
        Proposta con array `listaHyper` per gestione hype.
        
        **Nota**: Il campo `hype` (numero di hype) è calcolato lato frontend tramite `listaHyper.length`
      required:
        - _id
        - titolo
        - descrizione
        - proponenteID
        - listaHyper
      properties:
        _id:
          type: string
          example: "64a1b2c3d4e5f678901234"
        titolo:
          type: string
          example: "Nuovo parco cittadino"
        descrizione:
          type: string
          example: "Proposta per la creazione di un parco"
        proponenteID:
          type: string
          example: "64a1b2c3d4e5f678901235"
          description: "ID del proponente (può essere privato o ente)"
        categoria:
          type: string
          example: "Ambiente"
        foto:
          $ref: '#/components/schemas/Allegato'
          description: "Immagine della proposta (max 5MB)"
        listaHyper:
          type: array
          items:
            type: string
          example: ["64a1b2c3d4e5f678901236", "64a1b2c3d4e5f678901237"]
          description: "Array di ID utenti che hanno dato hype (il contatore hype è calcolato lato frontend tramite listaHyper.length)"
        stato:
          $ref: '#/components/schemas/StatoProposta'
        luogo:
          $ref: '#/components/schemas/Indirizzo'
        dataIpotetica:
          type: string
          format: date-time
          example: "2024-06-15T10:00:00.000Z"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    Allegato:
      type: object
      properties:
        data:
          type: string
          example: "iVBORw0KGgoAAAANSUhEUgAA..."
          description: "Dati binari codificati in base64"
        contentType:
          type: string
          example: "image/jpeg"
          description: "MIME type del file"

    StatoProposta:
      type: string
      enum: [bozza, pubblicata, in_corso, completata, respinta]
      example: "pubblicata"

    Indirizzo:
      type: object
      properties:
        via:
          type: string
          example: "Via Roma, 123"
        citta:
          type: string
          example: "Roma"
        cap:
          type: string
          example: "00100"
        provincia:
          type: string
          example: "RM"

  responses:
    BadRequest:
      description: Richiesta non valida
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Dati non validi"
              error:
                type: object
                properties:
                  details:
                    type: array
                    items:
                      type: string
                    example: ["Campo nome obbligatorio"]

    Unauthorized:
      description: Non autorizzato
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Token non valido o scaduto"

    Forbidden:
      description: Accesso negato
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Permessi insufficienti"

    NotFound:
      description: Risorsa non trovata
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Risorsa non trovata"

    InternalServerError:
      description: Errore interno del server
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Errore interno del server"
              error:
                type: object
                properties:
                  details:
                    type: string
                    example: "Errore database"

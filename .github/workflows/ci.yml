name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev, bugfix/*, feature/* ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run backend tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test
        MONGO_URI: memory
        JWT_SECRET: test-jwt-secret-key-for-ci
        ADMIN_EMAIL: admin@test.com
        ADMIN_PASSWORD: TestAdmin123!
        ENABLE_SECURITY_CONTROLS: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results-node-${{ matrix.node-version }}
        path: backend/coverage/

  test-frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Run frontend type checking
      run: |
        cd frontend
        npm run type-check

    - name: Build frontend
      run: |
        cd frontend
        npm run build  # Ora possiamo usare build completo dato che type-check passa

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-node-${{ matrix.node-version }}
        path: frontend/dist/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: incrowd-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: incrowd-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'

    - name: Run backend security audit
      run: |
        cd backend
        npm audit --audit-level=high
      continue-on-error: true

    - name: Run frontend security audit
      run: |
        cd frontend
        npm audit --audit-level=high
      continue-on-error: true

  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build, security-scan]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "Backend Tests: ${{ needs.test-backend.result }}"
        echo "Frontend Tests: ${{ needs.test-frontend.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        if [ "${{ needs.test-backend.result }}" != "success" ] || [ "${{ needs.test-frontend.result }}" != "success" ]; then
          echo "❌ I test non sono passati"
          exit 1
        else
          echo "✅ Tutti i test sono passati"
        fi

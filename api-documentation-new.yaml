openapi: 3.0.0
info:
  title: InCrowd API
  version: 1.0.0
  description: |
    # InCrowd API - Documentazione Completa
    
    Benvenuto nella documentazione dell'API di InCrowd, una piattaforma innovativa di crowdsourcing per proposte e iniziative cittadine.
    
    ## Panoramica
    
    L'API InCrowd fornisce accesso completo alla piattaforma per:
    - Gestione utenti unificata (cittadini privati ed enti)
    - Creazione e gestione proposte
    - Sistema di follow/followers
    - Amministrazione e moderazione
    
    ## Autenticazione e Sicurezza
    
    L'API utilizza autenticazione JWT (JSON Web Token):
    
    1. **Login**: Ottieni il token tramite `POST /api/auth/login`
    2. **Utilizzo**: Includi il token nell'header di ogni richiesta:
       ```
       Authorization: Bearer <your-jwt-token>
       ```
    3. **Token Structure**: Il JWT contiene `userId`, `email`, `userType`
    
    ### Sicurezza Password
    
    I requisiti minimi per le password sono:
    - **8 caratteri** minimo
    - **1 lettera maiuscola** 
    - **1 lettera minuscola**
    - **1 carattere speciale** (!@#$%^&*)
    
    I controlli di sicurezza sono **abilitabili/disabilitabili** tramite 
    variabile di ambiente `ENABLE_SECURITY_CONTROLS` (default: true).
    
    ## Struttura delle Response
    
    **Tutte le risposte seguono il formato standardizzato:**
    
    ```json
    {
      "data": { 
        // Dati della risposta (opzionale)
      },
      "message": "Messaggio descrittivo specifico",
      "error": {
        // Dettagli errore (solo presente in caso di errore)
      }
    }
    ```
    
    ## Gestione Errori
    
    - **400 Bad Request**: Dati non validi o parametri mancanti
    - **401 Unauthorized**: Token mancante, scaduto o non valido
    - **403 Forbidden**: Permessi insufficienti per l'operazione
    - **404 Not Found**: Risorsa non trovata
    - **409 Conflict**: Conflitto (es. email già esistente)
    - **500 Internal Server Error**: Errore interno del server
    
    ## Modello Utente Unificato
    
    L'API espone un **modello utente unico** con `user_type` che può essere:
    - `"privato"`: Cittadino privato
    - `"ente"`: Ente/organizzazione
    
    **Nota implementativa**: Nel database esistono due collezioni distinte 
    (`Privato` e `Ente`), ma l'API le unifica tramite il campo `user_type`.
    
    ### Campi Dinamici
    
    Alcuni campi sono calcolati a runtime:
    - `followersCount`: Numero di follower
    - `followingCount`: Numero di utenti seguiti
    - `hype`: Per le proposte, equivale alla lunghezza di `listaHyper`
    
    ## Upload e Limiti
    
    - **Immagini profilo**: Limite 5MB
    - **Immagini proposte**: Limite 5MB
    - Formati supportati: JPEG, PNG, GIF, WebP

servers:
  - url: http://localhost:3000
    description: Server di sviluppo locale

paths:
  # ROOT E PING
  /:
    get:
      tags:
        - System
      summary: Welcome message
      description: Messaggio di benvenuto dell'API
      responses:
        '200':
          description: Messaggio di benvenuto
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Benvenuti nelle API di InCrowd"

  /ping:
    get:
      tags:
        - System
      summary: Health check
      description: Verifica lo stato del server
      responses:
        '200':
          description: Server operativo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "ok"
                      timestamp:
                        type: string
                        format: date-time
                        example: "2025-08-19T14:30:00.000Z"
                  message:
                    type: string
                    example: "Server is running"

  # AUTH
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login utente
      description: Autentica un utente e restituisce JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "mario.rossi@email.com"
                password:
                  type: string
                  example: "Password123!"
      responses:
        '200':
          description: Login completato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIs..."
                      user:
                        $ref: '#/components/schemas/UserComplete'
                  message:
                    type: string
                    example: "Login completato con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/password:
    patch:
      tags:
        - Authentication
      summary: Cambia password
      description: Cambia la password per utenti privati ed enti
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  example: "OldPassword123!"
                newPassword:
                  type: string
                  example: "NewPassword456!"
                  description: "Deve rispettare i requisiti di sicurezza"
      responses:
        '200':
          description: Password aggiornata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password aggiornata con successo"
        '400':
          description: Dati non validi o password non sicura
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password non valida"
                  error:
                    type: object
                    properties:
                      details:
                        type: array
                        items:
                          type: string
                        example: ["La password deve contenere almeno una lettera maiuscola"]
        '401':
          $ref: '#/components/responses/Unauthorized'

  # USER (UNIFICATO)
  /api/user:
    get:
      tags:
        - Users
      summary: Lista tutti gli utenti
      description: Recupera tutti gli utenti (solo per operatori/admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista utenti recuperata
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserPublic'
                      total:
                        type: integer
                        example: 150
                  message:
                    type: string
                    example: "Utenti recuperati con successo"
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Users
      summary: Crea nuovo utente
      description: |
        Crea un nuovo utente (privato o ente) con validazione dei dati.
        
        **Campi obbligatori per tutti:**
        - user_type ('privato' | 'ente')
        - nome, codiceFiscale, email, password
        
        **Campi specifici per privati:**
        - cognome (obbligatorio)
        
        **Campi specifici per enti:**
        - nome_org (obbligatorio)
        - nome (opzionale, referente)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - user_type
                - nome
                - codiceFiscale
                - email
                - password
              properties:
                user_type:
                  type: string
                  enum: [privato, ente]
                  example: "privato"
                nome:
                  type: string
                  example: "Mario"
                cognome:
                  type: string
                  example: "Rossi"
                  description: "Obbligatorio per user_type='privato'"
                nome_org:
                  type: string
                  example: "Comune di Roma"
                  description: "Obbligatorio per user_type='ente'"
                codiceFiscale:
                  type: string
                  example: "RSSMRA80A01H501U"
                biografia:
                  type: string
                  example: "Descrizione profilo utente"
                email:
                  type: string
                  format: email
                  example: "mario.rossi@email.com"
                password:
                  type: string
                  example: "Password123!"
                  description: "Deve rispettare i requisiti di sicurezza"
                fotoProfilo:
                  type: string
                  format: binary
                  description: "Immagine profilo (max 5MB)"
      responses:
        '201':
          description: Utente creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserPublic'
                  message:
                    type: string
                    example: "Utente creato con successo"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email già registrata
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email già registrata"

  /api/user/me:
    get:
      tags:
        - Users
      summary: Profilo utente corrente
      description: Recupera il profilo completo dell'utente autenticato
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profilo recuperato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserComplete'
                  message:
                    type: string
                    example: "Profilo recuperato con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/user/profile:
    patch:
      tags:
        - Users
      summary: Aggiorna profilo
      description: Aggiorna il profilo dell'utente autenticato
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nome:
                  type: string
                  example: "Mario"
                cognome:
                  type: string
                  example: "Rossi"
                  description: "Solo per utenti privati"
                nome_org:
                  type: string
                  example: "Comune di Milano"
                  description: "Solo per enti"
                biografia:
                  type: string
                  example: "Nuova biografia"
                fotoProfilo:
                  type: string
                  format: binary
                  description: "Nuova immagine profilo (max 5MB)"
      responses:
        '200':
          description: Profilo aggiornato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserPublic'
                  message:
                    type: string
                    example: "Profilo aggiornato con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/user/account:
    delete:
      tags:
        - Users
      summary: Elimina account
      description: Elimina l'account dell'utente autenticato
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account eliminato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account eliminato con successo"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/user/search:
    get:
      tags:
        - Users
      summary: Cerca utenti
      description: |
        Cerca utenti per nome, cognome, nome_org o biografia.
        
        **Esempi di ricerca:**
        - `?q=Mario` - Cerca "Mario" in tutti i campi
        - `?q=Comune&user_type=ente` - Cerca "Comune" solo negli enti
        - `?q=sviluppatore&limit=20` - Cerca "sviluppatore" con limite 20 risultati
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 2
          example: "Mario"
          description: "Query di ricerca (minimo 2 caratteri)"
        - name: user_type
          in: query
          schema:
            type: string
            enum: [privato, ente]
          example: "privato"
          description: "Filtra per tipo utente"
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
      responses:
        '200':
          description: Risultati ricerca
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserPublic'
                      total:
                        type: integer
                        example: 25
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                  message:
                    type: string
                    example: "Ricerca completata"
              examples:
                mixed_results:
                  summary: Risultati misti (privati ed enti)
                  value:
                    data:
                      users:
                        - _id: "64a1b2c3d4e5f678901234"
                          user_type: "privato"
                          nome: "Mario"
                          cognome: "Rossi"
                          biografia: "Sviluppatore"
                          followersCount: 15
                          followingCount: 8
                        - _id: "64a1b2c3d4e5f678901235"
                          user_type: "ente"
                          nome_org: "Comune di Roma"
                          nome: "Mario"
                          biografia: "Amministrazione comunale"
                          followersCount: 150
                          followingCount: 5
                      total: 2
                    message: "Ricerca completata"
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/user/{id}:
    get:
      tags:
        - Users
      summary: Dettagli utente
      description: |
        Recupera i dettagli di un utente specifico.
        
        **Esempi di risposta per diversi tipi:**
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
      responses:
        '200':
          description: Dettagli utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserPublic'
                  message:
                    type: string
                    example: "Utente recuperato con successo"
              examples:
                user_privato:
                  summary: Esempio utente privato
                  value:
                    data:
                      user:
                        _id: "64a1b2c3d4e5f678901234"
                        user_type: "privato"
                        nome: "Mario"
                        cognome: "Rossi"
                        biografia: "Sviluppatore software"
                        fotoProfilo:
                          data: "iVBORw0KGgoAAAANSUhEUgAA..."
                          contentType: "image/jpeg"
                        followersCount: 15
                        followingCount: 8
                        createdAt: "2024-01-15T10:30:00.000Z"
                    message: "Utente recuperato con successo"
                user_ente:
                  summary: Esempio ente
                  value:
                    data:
                      user:
                        _id: "64a1b2c3d4e5f678901235"
                        user_type: "ente"
                        nome_org: "Comune di Roma"
                        nome: "Mario Bianchi"
                        biografia: "Amministrazione comunale"
                        fotoProfilo:
                          data: "iVBORw0KGgoAAAANSUhEUgAA..."
                          contentType: "image/png"
                        followersCount: 150
                        followingCount: 5
                        createdAt: "2024-02-20T14:15:00.000Z"
                    message: "Utente recuperato con successo"
        '404':
          $ref: '#/components/responses/NotFound'

  /api/user/{id}/avatar:
    get:
      tags:
        - Users
      summary: Avatar utente
      description: Recupera solo l'avatar di un utente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
      responses:
        '200':
          description: Avatar recuperato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      fotoProfilo:
                        $ref: '#/components/schemas/Allegato'
                  message:
                    type: string
                    example: "Avatar recuperato"
        '404':
          $ref: '#/components/responses/NotFound'

  # OPERATORI
  /api/operatori:
    get:
      tags:
        - Operatori
      summary: Lista operatori
      description: Recupera tutti gli operatori (solo admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista operatori
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      operatori:
                        type: array
                        items:
                          $ref: '#/components/schemas/Operatore'
                  message:
                    type: string
                    example: "Operatori recuperati con successo"
        '403':
          description: Solo admin possono accedere
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accesso negato. Permessi amministrativi richiesti"

    post:
      tags:
        - Operatori
      summary: Crea operatore
      description: Crea un nuovo operatore (solo admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nome
                - email
                - password
              properties:
                nome:
                  type: string
                  example: "Luigi Verdi"
                email:
                  type: string
                  format: email
                  example: "luigi.verdi@incrowd.com"
                password:
                  type: string
                  example: "OperatorePass123!"
      responses:
        '201':
          description: Operatore creato
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      operatore:
                        $ref: '#/components/schemas/Operatore'
                  message:
                    type: string
                    example: "Operatore creato con successo"
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/operatori/{id}:
    delete:
      tags:
        - Operatori
      summary: Elimina operatore
      description: Elimina un operatore (solo admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "64a1b2c3d4e5f678901234"
      responses:
        '200':
          description: Operatore eliminato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Operatore eliminato con successo"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/operatori/stats:
    get:
      tags:
        - Operatori
      summary: Statistiche operatore
      description: Recupera le statistiche dell'operatore autenticato
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistiche recuperate
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      stats:
                        type: object
                        properties:
                          totalProposte:
                            type: integer
                            example: 150
                          proposteAttive:
                            type: integer
                            example: 120
                          totalUtenti:
                            type: integer
                            example: 500
                  message:
                    type: string
                    example: "Statistiche recuperate"
        '403':
          description: Solo operatori possono accedere
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accesso riservato agli operatori"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Token JWT ottenuto tramite login. Il token contiene:
        - `userId`: ID dell'utente
        - `email`: Email dell'utente  
        - `userType`: Tipo utente (privato/ente/operatore/admin)

  schemas:
    UserPublic:
      type: object
      description: Dati pubblici di un utente (privato o ente)
      required:
        - _id
        - user_type
        - nome
        - createdAt
      properties:
        _id:
          type: string
          example: "64a1b2c3d4e5f678901234"
        user_type:
          type: string
          enum: [privato, ente]
          example: "privato"
          description: "Sempre presente e valorizzato"
        nome:
          type: string
          example: "Mario"
        cognome:
          type: string
          example: "Rossi"
          description: "Presente solo per user_type='privato'"
        nome_org:
          type: string
          example: "Comune di Roma" 
          description: "Presente solo per user_type='ente'"
        biografia:
          type: string
          example: "Descrizione del profilo"
        fotoProfilo:
          $ref: '#/components/schemas/Allegato'
        followersCount:
          type: integer
          example: 15
          description: "Campo calcolato dinamicamente"
        followingCount:
          type: integer
          example: 8
          description: "Campo calcolato dinamicamente"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    UserComplete:
      allOf:
        - $ref: '#/components/schemas/UserPublic'
        - type: object
          properties:
            email:
              type: string
              format: email
              example: "mario.rossi@email.com"
            codiceFiscale:
              type: string
              example: "RSSMRA80A01H501U"
            updatedAt:
              type: string
              format: date-time
              example: "2024-01-20T15:45:00.000Z"

    Operatore:
      type: object
      required:
        - _id
        - nome
        - email
      properties:
        _id:
          type: string
          example: "64a1b2c3d4e5f678901234"
        nome:
          type: string
          example: "Luigi Verdi"
        email:
          type: string
          format: email
          example: "luigi.verdi@incrowd.com"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-10T09:20:00.000Z"

    Proposta:
      type: object
      description: |
        Proposta con campo calcolato `hype`.
        
        **Nota**: `hype` equivale alla lunghezza dell'array `listaHyper`
      required:
        - _id
        - titolo
        - descrizione
        - proponenteID
        - listaHyper
      properties:
        _id:
          type: string
          example: "64a1b2c3d4e5f678901234"
        titolo:
          type: string
          example: "Nuovo parco cittadino"
        descrizione:
          type: string
          example: "Proposta per la creazione di un parco"
        proponenteID:
          type: string
          example: "64a1b2c3d4e5f678901235"
          description: "ID del proponente (può essere privato o ente)"
        categoria:
          type: string
          example: "Ambiente"
        foto:
          $ref: '#/components/schemas/Allegato'
          description: "Immagine della proposta (max 5MB)"
        listaHyper:
          type: array
          items:
            type: string
          example: ["64a1b2c3d4e5f678901236", "64a1b2c3d4e5f678901237"]
          description: "Array di ID utenti che hanno dato hype"
        hype:
          type: integer
          example: 2
          description: "Campo calcolato = lunghezza di listaHyper"
        stato:
          $ref: '#/components/schemas/StatoProposta'
        luogo:
          $ref: '#/components/schemas/Indirizzo'
        dataIpotetica:
          type: string
          format: date-time
          example: "2024-06-15T10:00:00.000Z"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    Allegato:
      type: object
      properties:
        data:
          type: string
          example: "iVBORw0KGgoAAAANSUhEUgAA..."
          description: "Dati binari codificati in base64"
        contentType:
          type: string
          example: "image/jpeg"
          description: "MIME type del file"

    StatoProposta:
      type: string
      enum: [bozza, pubblicata, in_corso, completata, respinta]
      example: "pubblicata"

    Indirizzo:
      type: object
      properties:
        via:
          type: string
          example: "Via Roma, 123"
        citta:
          type: string
          example: "Roma"
        cap:
          type: string
          example: "00100"
        provincia:
          type: string
          example: "RM"

  responses:
    BadRequest:
      description: Richiesta non valida
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Dati non validi"
              error:
                type: object
                properties:
                  details:
                    type: array
                    items:
                      type: string
                    example: ["Campo nome obbligatorio"]

    Unauthorized:
      description: Non autorizzato
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Token non valido o scaduto"

    Forbidden:
      description: Accesso negato
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Permessi insufficienti"

    NotFound:
      description: Risorsa non trovata
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Risorsa non trovata"
